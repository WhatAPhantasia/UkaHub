//----Drag and Drop----

//When you drop a file on the ghost that isn't something it can install
//reference0 is the file path, which is split up amongst the local variables below
OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".png" //These are pictures that they can set to wallpapers. Png works for me, but if it doesn't work for you let us know please, I'm curious about this.
		{
			_file = REPLACE(reference0,"]","\]")
			
			"\0\s[1]\b[2]\_q%(vera)\_q um... \w6%(_filename)%(_fileext)? \w8\w4\n\_q%(vera)\_q is this an image..? \w8i can set it up as your wallpaper, if that's what you wanted...\n\n"
			--
			all:{
			"\f[color,default]"
			"\![*]\q[Centered,OnWallpaper,%(_file),center]\n"
			"\![*]\q[Tiled,OnWallpaper,%(_file),tile]\n"
			"\![*]\q[Stretched,OnWallpaper,%(_file),stretch]"
			if "Windows 7" || "Windows 10" _in_ NotifyOS //These are the 'fit' and 'fill' options available from win 7 on. NotifyOS is set just below, to check what OS you're on
			{
				"\n\![*]\q[Fill,OnWallpaper,%(_file),stretch-x]"
				"\n\![*]\q[Fit,OnWallpaper,%(_file),stretch-y]"
			}
			if "Windows 10" _in_ NotifyOS; "\n\![*]\q[Spanned,OnWallpaper,%(_file),span]" //Same as above, but for the span option since that's win10 and above
			
			"\n\n\![*]\q[No thanks,WallpaperCancel]\n"
			"\![*]\q[Just wanted to show you something!,dndshowimage]\e"
			}
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au", ".ogg", ".flac"
		{
			"\0\s[1]\_q%(vera)\_q oh..! \w6you have music! \w8\w4\n\s[3]\_q%(vera)\_q that's neat... \w4are you gonna play it, %(pername)..?\e"
		}
		others
		{
			if _fileext == "" //If it's a folder. Using \_? lets you display the slashes and such in dialogue, but you have to toggle it off after you no longer need it
			{
				"\0\s[1]\i[41]\_q%(vera)\_q oh... \_?%(_filepath[1])\_?? \w8\w8\s[2]\i[41]\n\_q%(vera)\_q looks like some kinda folder... \w8\s[1]which is neat!\e"
			}
			else //If it's a file
			{
				"\0\s[1]\_q%(vera)\_q %(_filename)%(_fileext)..? \w8\w6\s[2]\n\_q%(vera)\_q um, \w6i don't know what this is, \w6but it looks cool...\e"
			}
		}
	}		
}

Select.dndshowimage
{
	"\0\s[1]\_q%(vera)\_q oh..! \w8\w8\s[3]\i[41]\i[26]\n\_q%(vera)\_q um, i can't really see it, but i bet it's neat, %(pername)..!\e"
}

//You can get other information about the OS here, it's in the other references. Reference0 includes the OS system, version, and display name
OnNotifyOSInfo
{
	NotifyOS = reference0
}

OnWallpaper
{
	"\0\![set,wallpaper,%(REPLACE(reference0,']','\]')),%(reference1)]"
	//--
	//i dont feel like doing indiv dialogues for wallpaper at the moment, maybe later
	//if reference1 == "center"; "\s[0]It's centered!\e"
	//elseif reference1 == "tile"; "\0\s[0]It's tiled!\e"
	//elseif reference1 == "stretch"; "\0\s[0]It's stretched!\e"
	//elseif reference1 == "stretch-x"; "\0\s[0]It's filled!\e"
	//elseif reference1 == "stretch-y"; "\0\s[0]It's fitted!\e"
	//elseif reference1 == "span"; "\0\s[0]It's spanned!\e"
}

Select.WallpaperCancel
{
	"\0\s[1]\i[1]\i[80]\_q%(vera)\_q oh, ok... \w8\n\_q%(vera)\_q um, \w2you can tell me if you change your mind, %(pername)...\e"
}

OnInstallBegin
{
	"\0\s[2]\i[81]\_q%(vera)\_q o-oh, \w2something to install..!\e"
	"\0\s[2]\i[81]\_q%(vera)\_q o-oh, \w2i can install that...\e"
}

//Finished installing something ghost related. You can remove any of the ifs here if you like, and just have it go to the else.
//reference0 is the type of installed item, reference1 is the name.
OnInstallComplete
{
	if reference0 == "ghost"
	{
		if "cat" _in_ reference1 || reference1 == "Dusty and Obsidian" || reference1 == "Tadora"
		{
			"\s[3]\i[1]\i[81]\_q%(vera)\_q gasp!! \w8\n\_q%(vera)\_q kitty cat!!!"
		}
		elseif reference1 == "Needle" || reference1 == "Radio Nowhere" || reference1 == "Paper" || reference1 == "Hydrate" || reference1 == "Balloons" || reference1 == "Pet Rock" || reference1 == "Plushie Base"
		{
			"\s[3]\i[26]\i[81]\_q%(vera)\_q ...um, isn't %(TOLOWER(reference1))... \w4an object..??"
		}
		else
		{
			"\s[2]\i[81]\_q%(vera)\_q oh, \w2cool... \w6is this a new person? \w8\w8\s[1]\i[81]\n\_q%(vera)\_q i think i can bring %(TOLOWER(reference1)) here, \w2if you want..."
		}
		--
		all:{
		"\n\n\f[color,default]"
		"\![*]\q[Call %(reference1),CallGhost]\n"
		"\![*]\q[Change to %(reference1),ChangeToGhost]\n\n"
		"\![*]\q[No thanks,CANCEL]\e"
		}
	}
	//TODO: the rest of the installation stuff when i feel like it
	elseif reference0 == "shell"
	{
		"\0\s[1]\i[81]\_q%(vera)\_q i've installed the %(reference1) shell..!\e"
	}
	elseif reference0 == "balloon"
	{
		"\0\s[1]\i[81]\_q%(vera)\_q i've installed the %(reference1) balloon..!\e"
	}
	elseif reference0 == "plugin"
	{
		"\0\s[1]\i[81]\_q%(vera)\_q i've installed the %(reference1) plugin..!\e"
	}
	elseif reference0 == "calendar skin"
	{
		"\0\s[1]\i[81]\_q%(vera)\_q i've installed the %(reference1) calendar..!\e"
	}
	elseif reference0 == "headline" //The wiki claims this is a possible outcome, but in my testing I've only been able to get it to show 'rss'
	{
		"\0\s[1]\i[81]\_q%(vera)\_q i've set up the headline for %(reference1)..!\e"
	}
	elseif reference0 == "rss"
	{
		"\0\s[1]\i[81]\_q%(vera)\_q i've set up the RSS feed for %(reference1)..!\e"
	}
	else //Even if you get rid of some of the ifs above, you should keep this else as a catch-all.
	{
		"\0\s[1]\i[81]\_q%(vera)\_q um, \w2i'm not sure what this is, \w2but i've installed %(reference1)..!\e"
	}
}

//Calling the ghost that was just installed. Add dialogues to these if you like.
Select.CallGhost
{
	"\![call,ghost,lastinstalled]\e"
}

//Opening the ghost that was just installed.
Select.ChangeToGhost
{
	"\![change,ghost,lastinstalled]\e"
}

//reference0 is the reason the install failed
OnInstallFailure //If the install fails
{
	if reference0 == "artificial" //If the user cancels by double clicking the balloon
	{
		"\0\s[1]\i[81]\_q%(vera)\_q o-oh, ok..!! \w8\s[2]\i[1]\i[80]\n\_q%(vera)\_q i'll stop..!\e"
	}
	else
	{
		"\0\s[2]\i[81]\_q%(vera)\_q o-oh, \w2i... \w8\n\_q%(vera)\_q i couldn't download this, i'm really sorry...\w8\w8\n\_q%(vera)\_q "
		--
		if reference0 == "unsupported" //File is not supported
		{
			"it says... \w2t-that the file is unsupported, \w2so...\e"
		}
		elseif reference0 == "extraction" //Couldn't extract
		{
			"i-i... \w2i can't \w2extract it properly, \w2i'm sorry...\e"
		}
		elseif reference0 == "invalid type" //install.txt isn't set up properly
		{
			"the, \w2um, \w2install.txt seems to have something wrong with it, \w2so \w2i can't...\e"
		}
		else
		{
			"i-it says... \w2'%(reference0)'...\e"
		}
	}
}

//reference0 is the Sakura name of the ghost the item was meant for, reference1 (since SSP 2.4.85) is the type of item you tried to install
OnInstallRefuse
{
	"\0\s[2]\i[81]\i[26]\_q%(vera)\_q um... \w4i can't install %(reference1). \w8\w8\s[1]\i[81]\i[26]\n\_q%(vera)\_q  it says it's meant for '%(reference0)', \w2so...\e"
}

//Creating an updates2.dau
OnUpdatedataCreating
{
	"\0\s[3]\i[81]\_q%(vera)\_q gasp! \w6an update!\e"
	"\0\s[3]\i[81]\_q%(vera)\_q WHAT... \w6you're being productive?!\e"
	"\0\s[3]\i[81]\_q%(vera)\_q UPDATES...!!\e"
}

//Finished creating
OnUpdatedataCreated
{
	"\0\s[3]\i[81]\_q%(vera)\_q ok done :)\e"
}

//Creating a .nar
//reference0 is the name of what you're making a nar for, reference2 is what you're making (balloon/ghost/etc)
OnNarCreating
{
	if reference2 == "ghost" && reference0 == "an ending"
	{
		"\0\s[1]\i[41]\_q%(vera)\_q GASP are you releasing me....... :0"
	}
	elseif reference2 == "balloon" && reference0 == "Hollerfeed Lite"
	{
		"\0\s[1]\i[41]\_q%(vera)\_q oh..!! \w8\n\_q%(vera)\_q is this a new hollerfeed update..???"
	}
	else
	{
		"\0\s[2]\i[81]\_q%(vera)\_q oh, \w2i can make a .nar for the '%(reference0)' %(reference2)...\w8\e"
	}
}

//Finished creating
//reference0 is the name of what you're making a nar for, reference2 is what you're making (balloon/ghost/etc)
OnNarCreated
{
	"\0\s[1]\i[81]\_q%(vera)\_q i think i've done it..? \w8\b\_q%(vera)\_q it should be \_a[OnNarLocation,%(reference1)]here...\_a\e"
}

//When you click on the anchor in the OnNarCreated dialogue, this function will open the folder you created the .nar in
OnNarLocation
{
	_path = SPLITPATH(reference0)[0] + SPLITPATH(reference0)[1]
	
	"\C\![open,file,%(_path)]"
}

//----Uninstalling----

//Bringing up the uninstall option
OnVanishSelecting
{
	"\0\s[1]\i[1]\i[80]\i[26]\_q%(vera)\_q ..?\f[color,default]\e"
}

//Deciding to uninstall
OnVanishSelected
{
	if holdingObsidian
	{
		if reference0 == "Dusty"
		{
			holdingObsidian = 0
			"\0\s[2]\i[1]\i[210]\_q%(vera)\_q ah, mister, please wait!\w2\s[-1]\w8\w8\w8\w8\n\s[2]\i[1]\i[18]\i[26]\i[80]\_q%(vera)\_q ...ahh, i guess i can't see the kitty cat anymore...\e"
		}
	}
	else
	{"\0\s[11]\i[1](It seems, before she could even process it, she was whisked away...)\w8\w8\e"}
}

//Changing your mind
OnVanishCancel 
{
	"\0\s[1]\i[1]\i[80]\i[26]\_q%(vera)\_q ...oh, um... \w8\w8\n\s[4]\i[1]\i[41]\i[26]\_q%(vera)\_q that was strange... \w8\s[5]\i[1]\i[41]i was feeling that weird \w2'waking up'\w2 feeling, \w2except... \w8\i[26]different.\e"
}

//Canceling uninstallation by double clicking the balloon
OnVanishButtonHold
{
	"\0\s[1]\i[1]\i[80]\i[35](...But, as soon as it appeared, the feeling seemed to go away...) \w8\n\n[half]\s[2]\i[1]\i[80]\i[26]\i[35](She looks very confused, but doesn't comment on it.)\e"
}

//When another ghost has been uninstalled and it switches to this ghost
//reference0 is the name of the uninstalled ghost
OnVanished
{
	"\0\s[11]\_q%(vera)\_q .........\i[1]%(reference0)..? \w8\n\_q%(vera)\_q seems to have... \w2disappeared..?\e"
}

//When you uninstall another ghost while this ghost is open. If you remove this event, it will just use OnVanished instead.
//reference0 is the name of the uninstalled ghost
//OnOtherGhostVanished
//{
//	"\0\s[0]Farewell,\w4 %(reference0).\e"
//}

//----Mail checking----

//reference2 is the email address it's checking? Wiki says mail server.
OnBIFFBegin
{
	"\0\s[2]\i[81]\_q%(vera)\_q oh, \w2yes, \w2i can check for emails...\e"
}

//reference0 is the number of emails found
OnBIFFComplete
{
	if reference0 == 0 //No new emails
	{
		"\0\s[1]\i[81]\_q%(vera)\_q hm, \w2there doesn't seem to be anything new...\e"
	}
	elseif reference0 <= 500 //less than 100 new emails
	{
		
		headers = ""
		if reference7 != "" && reference0 <= 500 //AHAHAHA I FINALLY FIGURED OUT HOW TO GET AN ARRAY OF THE HEADERS WITH AUTO TYPE CONVERT ON. They're normally in reference7, but since auto type convert changes the C_BYTE1 characters to commas, any headers with commas screw things up badly. But you can get the nonconverted values! Still need a loop to add menu markers and stuff to the display, but that can happen in the other function...
		{
			headers = SPLIT(reference.raw[7],C_BYTE1)
		}
		--
		_s = ""; if reference0 != 1; _s = "s" //Plural check, adds an s if the number of emails is not 1
		"\0\s[2]\i[81]\_q%(vera)\_q looks like you have %(reference0) new email%(_s)..."
		--
		if reference7 != "" //Same as above, no need to ask if there are no headers
		{
			"\w8\w8\s[1]\i[81]\n\_q%(vera)\_q i can show you the email header%(_s), %(pername)..."
			--
			"\n\n\f[color,default]\![*]\q[Yes,OnSeeHeaders,yes]\n\*\![*]\q[No,OnSeeHeaders,no]"
		}
	}
	else //more than 500 new emails
	{
		"\0\s[2]\i[81]\_q%(vera)\_q wow, you have %(reference0) new emails..."
	}
	--
	"\e"
}

//Displaying the headers. No need to touch this other than changing the surface, or if you want to make the buttons different or something. Reference0 is the list of headers
OnSeeHeaders
{
	if reference0 == "yes" //It's set up this way so that the headers variable will still be erased if the user says no. If they say no, it'll just erase the headers and say nothing
	{
		_display = ""
		foreach headers; _header
		{
			_display += "\![*]"
			_display += SHIORI3FW.EscapeAllTags(_header)
			_display += "\n\n[half]"
		}
		"\0\s[0]\b2\![set,autoscroll,disable]\*\_q"
		--
		"\![*]\q[Done,cancelnodialogue]\n\n"
		--
		"%(_display)"
		--
		"\n\n\![*]\q[Done,cancelnodialogue]"
	}
	--
	ERASEVAR("headers") //This erases the variable so you're not storing all those headers and bloating your save. Also, privacy reasons.
}

//Email checking failed
//reference0 is the error returned
OnBIFFFailure
{
	if reference0 == "timeout" //If the connection times out
	{
		"\0\s[2]\i[81]\i[26]\_q%(vera)\_q ah, \w2t-the connection timed out...\e"
	}
	elseif reference0 == "kick" //if the ghost can't get into the account. Gmail requires an app specific password to get in
	{
		"\0\s[2]\i[81]\i[26]\_q%(vera)\_q h-huh...? \w6i can't get into the account...\e"
	}
	elseif reference0 == "defect" //If info in the POP menu is wrong
	{
		"\0\s[1]\i[81]\i[26]\_q%(vera)\_q ah... \w2did you set up your email settings right, %(pername)..? \w8\w6\s[2]\i[81]\n\_q%(vera)\_q um, you can change them here..."
		--
		"\![open,configurationdialog,biff]\e"
	}
	elseif reference0 == "artificial" //As far as I can tell, artificial is if the user double clicks on the balloon to stop it
	{
		"\0\s[1]\i[81]\_q%(vera)\_q oh..! \w8\w6\s[1]\n\_q%(vera)\_q ok, i got it...\e"
	}
	else //Some other kind of error.
	{
		"\0\s[2]\i[81]\_q%(vera)\_q u-um, i can't get in... \w8\w6\n\_q%(vera)\_q it says '%(reference0)'...\e"
	}
}

//----Network update---

//When the ghost finishes checking for updates
//reference0 is 'none' if there are no new files, and 'changed' if there are new files. reference1 is a list of the changed files, separated by commas
OnUpdateCheckComplete 
{
	if reference0 == "none" //If there are no new files
	{
		AutoUpdates[1] = 1 //Sets it so it won't check again until at least midnight
	}
	else
	{
		AutoUpdates[1] = 2 //This makes it so the ghost will tell the user there's a new update next time they open their menu
	}
}

//Starting to actually update
OnUpdateBegin
{
	"\0\t\s[11](Ah... She's fallen asleep.)\w8\n\n[half](Looks like she can update in peace.)\w8\w8"
}

//reference0 is the number of new files, starting from 0
OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	_s = ""; _is = "is"; if reference0 != 1; _s = "s"; _is = "are" //plural checks, adds an s and changes is to are if there's more than 1 file
	
	"\0\t\s[11](There %(_is) %(reference0) new file%(_s)!)\w8\w8"
}

//When the update finishes. Don't forget to initialize any new variables you've created, more on that in Bootend.
//reference0 is 'none' if there were no new files to update with, reference1 is a list of new file names, separated by commas
OnUpdateComplete
{
	UpdateVars
	AutoUpdates[1] = 0
	if reference0 == "none"
	{
		"\0(Looks like there are no new files...)\w8\w6\n\n[half]\s[11]\i[1]\_q%(vera)\_q h-huh..?\e"
	}
	else
	{
		UpdateVars //Sets new variables upon a successful update. See the end of Bootend for an explanation on this.
		
		"\0(Update complete. \w4You can see the changelog \_a[https://docs.google.com/document/d/10yy69A5hkizTPMh1mmRISIDg8M3JMfOdL9abrYmme20/edit?usp=sharing]here.\_a) \w8\w6\n\n[half]\s[11]\i[1]\_q%(vera)\_q ..?\e"
	}
}

//I've put this here so it's easier to remember to update the version number while you're updating the changelog. This will display on the ghost's menu. I made it an envelope so you can have it be the same across multiple menus for multiple modes, if you want.
ghostver
{
	"0.0.1"
}

//Revamped this code! It's a lot more concise now
//reference0 is the name of the file currently being downloaded
OnUpdate.OnDownloadBegin
{
	_progress = TOINT(reference1) + 1
	_total = TOINT(reference2) + 1
	
	"\0\b2\t\_q"
	--
	if "aitalk" _in_ reference0
	{
		"(Looks like she might have more to say.)"
		"(Looks like more random conversation topics..!)"
	}
	elseif "mouse" _in_ reference0
	{
		"(Looks like new mouse interactions.)"
		"(She might react differently to touch now...)"
	}
	elseif "menu" _in_ reference0
	{
		"(New menu stuff...)"
		"(Her menu content might have changed a little...)"
	}
	elseif "bootend" _in_ reference0
	{
		"(Might have new things to say on boot or close.)"
		"(New boot greetings and close send-offs?)"
	}
	else
	{
		"(Downloading %(reference0)...)"
	}
	--
	"\n\n\f[bold,0]"
	--
	_display = ""
	for _i = 0; _i < _total; _i++
	{
		//Loading bar display - customize with text or images or whatever
		_filled = "■" //Files that have already been downloaded
		_empty = "□" //Files that have not been downloaded yet

		//This is a bit like a ternary operator, for anyone familiar with those... It's just an array with the symbols/images/text specified above, and then the index it picks is based on whether _i < _progress is true or not. Ha, take that, languages like Python that use True/False (but have actual ternary operators)!
		_display += (_empty,_filled)[_i < _progress]
	}
	--
	"%(_display)\n\n%(_progress)/%(_total)"
}

//reference0 is the reason the update failed
OnUpdateFailure //If the update fails
{
	if reference0 == "timeout" //If it timed out
	{
		"\0(Looks like the connection timed out...)"
	}
	elseif reference0 == "md5 miss" //If the update files have not been uploaded correctly and don't match the updates2.dau
	{
		_currentfile = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3] //This gets the name and extension of the offending file
		"\00(The MD5 values don't match.\w8\w8 You should contact \_a[https://whataphantasia.carrd.co]Phantasia\_a and let nim know that '%(_currentfile)' is giving an MD5 error.)"
	}
	elseif reference0 == "artificial" //If the user cancels the update by double clicking the balloon
	{
		"\0(Update stopped!)"
	}
	else //Any other errors
	{
		"\0(Looks like there's been an error: \w4'%(reference0)'.)"
	}
	--
	"\w8\w8\w6\n\n[half]\s[11]\i[1]\_q%(vera)\_q ..?\e"
}

//reference0 is the name of the site, reference1 is the url
OnHeadlinesenseBegin
{
	"\0\s[1]\_q%(vera)\_q o-oh! \w8\w2\s[2]\i[81]\n\_q%(vera)\_q of course, i'll check %(reference0)...\e"
}

//Taken from Zarla's GT template. Slightly modified because the top part was redundant as far as I could tell..?
//reference0 is the site name, reference1 is the url, reference3 is the headlines
OnHeadlinesense.OnFind
{
	_display = REPLACE(reference3,"\_a[","\![*]\_a[")
 	//---- Headlines
	"\0\b2%(reference0):\n\n%(_display)\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
}

Select.Headline_Cancel
{
	"\0\s[2]\i[18]\i[81]\_q%(vera)\_q closing the RSS feed...\e"
}

//Looks like this happens if you view a headline and nothing has changed. I can only get RSS to work, so... I'll leave it here just in case.
OnHeadlinesenseComplete 
{
	"\0\s[2]\i[81]\_q%(vera)\_q ah, \w2looks like there's nothing new...\e"
}

//reference0 is the reason it failed
OnHeadlinesenseFailure
{
	"\0\s[2]\i[81]\i[26]\_q%(vera)\_q o-oh, it seems i can't update the feed?\w8\w8\n\_q%(vera)\_q "
	--
	if reference0 == "can't download"
	{
		"i can't download it...\e"
	}
	elseif reference0 == "can't analyze"
	{
		"i can't analyze it...\e"
	}
	else
	{
		"i'm not sure why,\w4 it says '%(reference0)'...\e"
	}
}

//----Misc----

//reference0 is the name of the server it's connecting to
OnSNTPBegin
{
	"\0\s[2]\i[81]\_q%(vera)\_q ok,\w2 let me check the time at %(reference0)...\w8\w8\e"
}

//Grabbed this from the GT template, don't see a reason to redo this
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//Above comment from the person who originally coded these functions
//reference0 is the name of the server it's connecting to, reference1 is the server's time, reference2 is the computer's time, reference3 is the difference (in seconds)
OnSNTPCompare
{
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n"
	--
	"Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
		"\s[3]\i[81]\_q%(vera)\_q your clock looks good, %(pername)..!\e"
	}
 	else //if your clock doesn't match
	{
		"\0\s[2]\i[81]\_q%(vera)\_q ah, your clock doesn't match. \w8\w6\n\s[1]\i[81]\_q%(vera)\_q i can fix it..?"
		--
		all:{
		"\n\n"
		"\![*]\q[Fix it,OnSNTPExecute]\n"
		"\![*]\q[Leave it alone,OnSNTPCancel]\e"
		}
	}
}

//The \6 is what actually changes the clock
OnSNTPExecute
{
	"\6"
	--
	"\0\s[2]\i[81]\_q%(vera)\_q um, \w2i think it should be good now..!\e"
}

OnSNTPCancel
{
	"\0\s[1]\_q%(vera)\_q ok..! \w8\w6\n\_q%(vera)\_q um, you can always tell me if you change your mind, %(pername)..!\e"
}

//reference0 is the name of the SNTP server - Note that this may happen before any other STNP dialogue is said! Keep in mind when writing your dialogue that the user will not necessarily have clicked the yes button.
OnSNTPFailure
{
	"\0\s[2]\i[81]\_q%(vera)\_q o-oh, \w2um... \w8\w8\n\i[26]\_q%(vera)\_q something went wrong, \w2so i can't check the time...\e"
}

OnDisplayChange
{
	displaybpp = reference0
 	displaywidth = reference1
	displayheight = reference2
}

//I've never gotten this to work but you can add it if you like
OnScreenSaverEnd
{
	"\0\s[1]\_q%(vera)\_q ..!! \w8\w8\w4\n\s[3]\i[26]\_q%(vera)\_q you're back, %(pername)..?\e"
}

//Usually at 20% battery or less
//reference0 should be the exact percentage left
OnBatteryLow
{
	"\0\s[2]\i[1]\i[80]\i[26]\i[35](...She looks a little worried about your battery.)\e"
}

//----Commented this out because the moment this message plays my laptop dies haha
//Usually at 5% battery or less
//reference0 should be the exact percentage left
//OnBatteryCritical
//{
//	"\0\s[1]\i[1]\i[80]\i[35](Charge your laptop!)\e"
//}

//reference0 is the new size, reference1 is the previous size. Sadly, you can't check for the Y scale.
OnShellScaling
{
	nowscale[0] = reference0 //X
	nowscale[1] = reference2 //Y
	
	if reference0 < 0 //If it's backwards
	{
		"\0\i[35](Flipped the world around.)\e"
		"\0\i[35](The scar's on the wrong side.)\e" //spoilers lol
		"\0\i[35](She has a pretty asymmetrical design, huh..?)\e"
	}
	if reference2 < 2 //Upside down (and backwards, if applicable)
	{
		"\0\i[35](Oh!\w2 How'd that happen?)\e"
		"\0\i[35](Upside down...)\e"
	}
	elseif reference0 < 90
	{
		"\0\i[35](She's already small enough...)\e"
		"\0\i[35](You can barely see her..!)\e"
		"\0\i[35](Teeny tiny.)\e"
	}
	elseif reference0 == 100
	{
		"\0\i[35](Back to normal.)\e"
		"\0\i[35](Nice and cozy.)\e"
	}
	elseif reference0 >= 300
	{
		"\0\i[35](...Is your monitor that big?)\e"
		"\0\i[35](This seems excessive.)\e"
		"\0\i[35](Bigger than life!)\e"
	}
	/*elseif reference0 != 200 || reference0 != 300 || reference0 != 400 //couldnt get this to work + only applicable if you turn off anti-aliasing or something?
	{
		"\0\i[35](Pixels look strange at this scaling...)\e"
	}*/
}

//Hotkeys. reference0 is the name of the key as displayed on the keycap. reference4, for SSP only, will have things like ctrl and alt, separated by commas.
OnKeyPress
{
	case reference0
	{
		when "t"; OnAiTalk
		when "r"; OnLastTalk
		when "y"; "\![raise,OnStartTalking]" //Starts a commu dialogue with a random ghost
		when "f1"; "\![open,readme]"
		when "f5"; {if debug; "\![reload,ghost]"}
		when "f6"; {if debug; "\![reload,shiori]"}
		when "f7"; {if debug; "\![reload,shell]"}
		when "f8"; {if debug; "\![reload,balloon]"}
		when "v"; {if debug; OnTestVar}
		when "c"; {if debug; OnCommuPingMenu}
	}
}