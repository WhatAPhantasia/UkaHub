//-----Envelopes-----

filetype
{
	".txt"
	".dic"
	".png"
	".jpg"
	".jpeg"
	".mp3"
	".exe"
	".bat"
	".cfg"
	".wav"
	".pdf"
	".dat"
	".gif"
	".tiff"
	".dll"
	".pna"
	".ico"
	".dau"
	".zip"
	".nar"
	".html"
	".psd"
	".mp4"
	".ttf"
	".rar"
}

PeopleArray
{
	"vera","skul","ulys","lila","luce"
}

HollercodeArray
{
	"instantiator","prospector","ruminator","revisor"
}

//i uhhhh, could just pull this from html basic colors but,, too tired ill come up w my own colors YEAAAAA
colores
{
	"yellow"
	"red"
	"blue"
	"green"
	"orange"
	"purple"
	"pink"
	"cyan"
	"indigo"
	"lime"
	"sunset"
	"midnight"
	"rainbow"
	"black"
	"white"
	"grey"
}

//debug func to be deleted later (and then i never deleted it)
Count {_argc}

//omfg
//"card name,arcana"
//make a function to identify suit by going if _TarotSuit[1] in card or whatever idk how to code /j
TarotDeck {
	_deck = ("The Fool,Major","The Magician,Major","The High Priestess,Major","The Empress,Major","The Emperor,Major","The Hierophant,Major","The Lovers,Major","The Chariot,Major","Strength,Major","The Hermit,Major","The Wheel of Fortune,Major","Justice,Major","The Hanged Man,Major","Death,Major","Temperance,Major","The Devil,Major","The Tower,Major","The Star,Major","The Moon,Major","The Sun,Major","Judgement,Major","The World,Major","Knight of Wands,Minor","King of Wands,Minor","Queen of Wands,Minor","Page of Wands,Minor","2 of Wands,Minor","3 of Wands,Minor","4 of Wands,Minor","5 of Wands,Minor","6 of Wands,Minor","7 of Wands,Minor","8 of Wands,Minor","9 of Wands,Minor","10 of Wands,Minor","Ace of Wands,Minor","Knight of Cups,Minor","King of Cups,Minor","Queen of Cups,Minor","Page of Cups,Minor","2 of Cups,Minor","3 of Cups,Minor","4 of Cups,Minor","5 of Cups,Minor","6 of Cups,Minor","7 of Cups,Minor","8 of Cups,Minor","9 of Cups,Minor","10 of Cups,Minor","Ace of Cups,Minor","Knight of Swords,Minor","King of Swords,Minor","Queen of Swords,Minor","Page of Swords,Minor","2 of Swords,Minor","3 of Swords,Minor","4 of Swords,Minor","5 of Swords,Minor","6 of Swords,Minor","7 of Swords,Minor","8 of Swords,Minor","9 of Swords,Minor","10 of Swords,Minor","Ace of Swords,Minor","Knight of Pentacles,Minor","King of Pentacles,Minor","Queen of Pentacles,Minor","Page of Pentacles,Minor","2 of Pentacles,Minor","3 of Pentacles,Minor","4 of Pentacles,Minor","5 of Pentacles,Minor","6 of Pentacles,Minor","7 of Pentacles,Minor","8 of Pentacles,Minor","9 of Pentacles,Minor","10 of Pentacles,Minor","Ace of Pentacles,Minor")
	//_deck = TOSTR(_deck)
	_rand = IARRAY
	_out = IARRAY
	
	if _argv[0] == "rand" {RandCard(_deck)}
	elseif _argv[0] == "all" {_deck}
	else {PickCard(_deck[_argv])}
}
//"Name,Suit"
CardDeck {
	_deck = ("A,Spades","2,Spades","3,Spades","4,Spades","5,Spades","6,Spades","7,Spades","8,Spades","9,Spades","10,Spades","J,Spades","Q,Spades","K,Spades","A,Hearts","2,Hearts","3,Hearts","4,Hearts","5,Hearts","6,Hearts","7,Hearts","8,Hearts","9,Hearts","10,Hearts","J,Hearts","Q,Hearts","K,Hearts","A,Clubs","2,Clubs","3,Clubs","4,Clubs","5,Clubs","6,Clubs","7,Clubs","8,Clubs","9,Clubs","10,Clubs","J,Clubs","Q,Clubs","K,Clubs","A,Diamonds","2,Diamonds","3,Diamonds","4,Diamonds","5,Diamonds","6,Diamonds","7,Diamonds","8,Diamonds","9,Diamonds","10,Diamonds","J,Diamonds","Q,Diamonds","K,Diamonds","JOKER,JOKER")
	_rand = IARRAY
	_out = IARRAY
	
	if _argv[0] == "rand" {RandCard(_deck)}
	elseif _argv[0] == "all" {_deck}
	else {PickCard(_deck[_argv])}
}
//this functionality is mostly deprecated now because its WAYYY too hard to check for dupes when youre randomly pulling them individually like this. it has its use cases tho so thats why its still here.
RandCard
{
	_rand = RAND(ARRAYSIZE(_argv)-1)
	_out = _argv[_rand]
	_out
}
//im TRYING to make it go _deck[desired number] RAGHHHHHHHHHH
//this will call any item like "The Empress,Major" and you can do _card = "\![raise,OnTarotDeck,3]" then _card[1] or whatever
//these lines of code are super uneccessary but i cant figure out how to make it work otherwise??? its a load bearing pillar i dont know how to replace
PickCard
{
	_out = _argv
	_out
}


//--name politeness determiner
pername 		{if !Flag("No Formality")
				{"%(usertitle) %(TOLOWER(username))"}
				else
				{"%(TOLOWER(username))"}
				}
//--ALWAYS formal name output
forname 		{"%(usertitle) %(TOLOWER(username))"}
//determines whether or not to add an honorific
prefix 			{
				if Flag("No Formality")	{IARRAY}
				else 					{"%(usertitle)"}
				}
//currently not using this one
menuprefix		{if Flag("No Formality") 
				{"No Title"} 
				else 
				{"%(Capitalize(usertitle))"} 
				}


//--hollercode/name envelopes

vera 			{"\f[color,%(n.yellow)]VERA:\w4"}
instantiator 	{"\f[color,%(n.yellow)]Instantiator:\w4"}
prospector 		{"\f[color,%(n.red)]Prospector:"}
ruminator 		{"\f[color,%(n.blue)]Ruminator:"}
revisor 		{"\f[color,%(n.green)]Revisor:"}

//determine text color!
n.red 			{if readability == "No Color"; "default"
				 elseif readability == "Limited Color"; "maroon"
				 else; "red"}
n.green 		{if readability == "No Color"; "default"
				 elseif readability == "Limited Color"; "green"
				 else; "0,200,0"}
n.blue 			{if readability == "No Color"; "default"
				 elseif readability == "Limited Color"; "navy"
				 else; "blue"}
n.yellow 		{if readability == "No Color"; "default"
				 elseif readability == "Limited Color"; "100,80,0"
				 else; "130,110,0"}
				//why tf did vera decide to go and have the most unreadable theme color


//--PRONOUNS!!

//"%(they) left that there."
//"%(their) work is really cool."
//"I'll ask %(them) later."
//"%(they)%(p('re','s')) really good at it."
//"%(they) %(p('are','is')) thinking about cheese!"
//"%(they) %(p('were','was')) lost in their code, but %(they) fixed it!!"
//use %(capitalize(they)) to use it properly at the start of sentences.
their
{
	if pronouns == "masc"; "his"
	elseif pronouns == "fem"; "her"
	elseif pronouns == "custom"; "%(custompronouns[2])"
	else; "their"
}
theirs
{
	if pronouns == "masc"; "his"
	elseif pronouns == "fem"; "hers"
	elseif pronouns == "custom"; "%(custompronouns[3])"
	else; "theirs"
}
they
{
	if pronouns == "masc"; "he"
	elseif pronouns == "fem"; "she"
	elseif pronouns == "custom"; "%(custompronouns[0])"
	else; "they"
}
them
{
	if pronouns == "masc"; "him"
	elseif pronouns == "fem"; "her"
	elseif pronouns == "custom"; "%(custompronouns[1])"
	else; "them"
}
//CHECK CONTEXT SINGULAR OR PLURAL!!
//%(they) %(p('are','is'))
//You can change the name of this function if you want! I kept it short so it's fast to type (thank you zi)
p
{
	if pronounplur == "plur"; _argv[0] //they are
	else; _argv[1] //he is/she is
}

//uuhhhhhhhhhh relationship stuff
//minor developments are marked at 5s, and major developments are marked at quarters/tens. no limit 

//this subtracts posfeel by negfeel. results in a negative if neg > pos, do REPLACE(joinfeel,"-","") if you want absolute value
joinfeel {posfeel - negfeel}

//this divides posfeel by negfeel. if negfeel > posfeel, product is less than 0 (decimals).
//if you do checks with this, it indicates her opinions of the user being more affected depending on how much youve raised her stats. like if you have pos/neg 100/5 vs 10/5. 
//better than joinfeel in that case, in which 5 neg/pos acts barely affects her perception of user if they have lots of the other feeling.
divfeel
{
	_out = 0
	if posfeel == 0 || negfeel == 0 {_out = 0} //0 output means that the other stat has nothing in it obvi, making mixed feelings invalid
	else 							{_out = posfeel / negfeel}
	_out = REPLACE(_out,"-","") //shouldn't need an absolute value check because relationship vars shouldnt go into the negatives but. just in case
	_out
}


//--JOINED ARRAYS--
//touch
allrecenttouch	{posrecenttouch + negrecenttouch}
posrecenttouch	{recenttouch[0] + recenttouch[1] + recenttouch[2]}
negrecenttouch	{recenttouch[3] + recenttouch[4]}
alltotaltouch	{postotaltouch + negtotaltouch}
postotaltouch	{totaltouch[0] + totaltouch[1] + totaltouch[2]}
negtotaltouch	{totaltouch[3] + totaltouch[4]}

//act
alltotalact		{totalact[0] + totalact[1] + totalact[2] + totalact[3] + totalact[4] + totalact[5]}

//give
alltotalgive	{totalgive[0] + totalgive[1] + totalgive[2] + totalgive[3]}



//-----Sleep Stuff----
//both sleep/wake range from 0-100.

/*
	earlymorning 	5-8am
	morning 		9-11am
	lunch 			12-2pm
	afternoon 		3-5pm
	evening 		6-8pm
	latenight 		9pm-12am
	midnight 		1-4am
*/
	
sleepiness
{
	_i = 1
	
	_r2 = RAND(10) + 20
	_r3 = RAND(10) + 30
	_r4 = RAND(10) + 40
	
	//her circadian rhythm fucked up
	if timeslot == "lunch" || timeslot == "afternoon" //most sleepy midday (has to talk to friends tho)
	{_i += _r4} //41-50
	elseif timeslot == "evening" || timeslot == "latenight" || timeslot == "midnight" //despite being most tired at night her circadian rhythm will not let her rest
	{_i += _r2} //21-30
	elseif timeslot == "earlymorning" || timeslot == "morning" //not used to being up early
	{_i += _r3} //31-40
	--
	if recenttouch[1] > 5 //sleepy pets
	{_i += 2}
	--
	if _i < 0; _i = 0
	if _i > 100; _i = 100
	--
	"%(_i)"
}
wakeyness
{
	_i = 1
	
	_r1 = RAND(10) + 10
	_r2 = RAND(10) + 20
	//this is a super roundabout way to do the rands siiigh
	
	if timeslot == "afternoon" || timeslot == "lunch"
	{_i += RAND(10)} //1-10
	elseif timeslot == "evening" || timeslot == "latenight" || timeslot == "midnight"
	{_i += _r2} //21-30
	elseif timeslot == "earlymorning" || timeslot == "morning"
	{_i += _r1} //11-20
	--
	if recenttouch[1] > 5 //sleepy pets
	{_i -= 2}
	--
	if _i < 0; _i = 0
	if _i > 100; _i = 100
	--
	"%(_i)"
}


//-----Shell Stuff----

vidle
{
	if posfeel >= 20 {
		vcasidle
		if !holdingObsidian && EFlag("FirstHoller") && RAND(3) == 2
		{vtabletidle}
		}
	else {vsleepyidle}
}

vsleepyidle
{
	"\s[2]\i[17]\i[1]\i[80]"
	"\s[2]\i[18]\i[1]\i[80]"
	"\s[5]\i[1]\i[80]\![anim,clear,25]"
}

vcasidle {"\s[%(ANY(2,5))]"}

//tablet idle order: base, eyebrows, mouth, leg, blush
//(no speechbubbles, feels kinda cluttery and limited)
vtabletidle {"\s[12]\i[%(ANY(25,26,27))]\i[%(ANY(0,41))]\i[%(ANY(0,0,0,1))]\i[%(ANY(0,0,0,1030))]"}

vattention
{
	if posfeel >= 20
	{
		"\s[1]"
		"\s[1]\i[41]"
	}
	else
	{
		"\s[1]\i[1]\i[80]"
	}
}

//-----Menu stuff-----

season //Current season
{
	if hemisphere == "Southern"
	{
		if month > 2 && month < 6; "Autumn"
		elseif month > 5 && month < 9; "Winter"
		elseif month > 8 && month < 12; "Spring"
		else; "Summer"
	}
	else
	{
		if month > 2 && month < 6; "Spring"
		elseif month > 5 && month < 9; "Summer"
		elseif month > 8 && month < 12; "Autumn"
		else; "Winter"
	}
}

//hour12 displays the hour like a 12 hour clock, except for 12 which is displayed as 0
nowhour
{
	if hour12 == 0; "12"
	else; "%(hour12)"
}

//Adding a 0 to the minute if it's under 10
nowmin
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

//Total hours
totalhours {x.up_total / 60}

//current session hours
x.up_hours {x.up_mins / 60}

//Total hours + minutes
totalruntime
{
	_hours = x.up_total / 60
	_mins = x.up_total % 60
	if _mins <= 9; _mins = "0%(_mins)"
	
	"%(_hours):%(_mins)"
}

//Current runtime as hours + minutes
runtime
{
	_hours = x.up_mins / 60
	_mins = x.up_mins % 60
	if _mins <= 9; _mins = "0%(_mins)"
	
	"%(_hours):%(_mins)"
}

//AM or PM - ampm is 0 during am, and 1 during pm
ap
{
 	if ampm == 0; "AM"
 	else; "PM"
}

//Abbreviated week day
wd
{
	if weekday == 0; "Sun"
	elseif weekday == 1; "Mon"
	elseif weekday == 2; "Tue"
	elseif weekday == 3; "Wed"
	elseif weekday == 4; "Thu"
	elseif weekday == 5; "Fri"
	else; "Sat"
}

//Full week day
nowday
{
	_weekday = weekday
	if _argv[0] == "next"
	{
		_weekday++
		if _weekday > 6; _weekday = 0
	}
	if _argv[0] == "last"
	{
		_weekday--
		if _weekday < 0; _weekday = 6
	}
	
	if GETTYPE(_argv[0]) == 1 //If it's an integer
	{
		while _argv[0] > 6; {_argv[0] -= 7}
		while _argv[0] < 0; {_argv[0] += 7}
		_weekday = _argv[0]
	}
	
	if _weekday == 0; "Sunday"
	elseif _weekday == 1; "Monday"
	elseif _weekday == 2; "Tuesday"
	elseif _weekday == 3; "Wednesday"
	elseif _weekday == 4; "Thursday"
	elseif _weekday == 5; "Friday"
	else; "Saturday"
}

//The current month name
nowmonth
{
	_month = month
	
	if _argv[0] == "next"
	{
		_month++
		if _month > 12; _month = 1
	}
	if _argv[0] == "last"
	{
		_month--
		if _month < 1; _month = 12
	}
	
	if GETTYPE(_argv[0]) == 1 //If it's an integer
	{
		while _argv[0] > 12; {_argv[0] -= 12}
		while _argv[0] < 1; {_argv[0] += 12}
		_month = _argv[0]
	}
	
	if _month == 1; "January"
	elseif _month == 2; "February"
	elseif _month == 3; "March"
	elseif _month == 4; "April"
	elseif _month == 5; "May"
	elseif _month == 6; "June"
	elseif _month == 7; "July"
	elseif _month == 8; "August"
	elseif _month == 9; "September"
	elseif _month == 10; "October"
	elseif _month == 11; "November"
	else; "December"
}

//Take an integer, give the name of the month it goes with
MonthName
{
	switch _argv[0]
	{
		"" //0
		"january"
		"february"
		"march"
		"april"
		"may"
		"june"
		"july"
		"august"
		"september"
		"october"
		"november"
		"december"
	}
}

//Checks if the day is valid for the month given
//Month is argument 0, day is argument 1
//Returns 1 if it's a valid day, 0 if it's not
IsValidDay
{
	_month = TOINT(_argv[0])
	_day = TOINT(_argv[1])

	case _month
	{
		when 2
		{
			if _day >= 1 && _day <= 29; 1
			else; 0
		}
		when 4, 6, 9, 11
		{
			if _day >= 1 && _day <= 30; 1
			else; 0
		}
		others //1, 3, 5, 7, 8, 10, 12
		{
			if _day >= 1 && _day <= 31; 1
			else; 0
		}
	}
}

//Checks if this is a leap year
leapyear
{
	if year % 4 != 0; 0
	elseif year % 100 != 0; 1
	elseif year % 400 != 0; 0
	else; 1
}

//Gets the day of the year it currently is, starting from 1 because starting from 0 here is silly
yearday {GETTIME[7] + 1}

yearweek
{
	//Get the current day of the year
	_days = yearday

	//Get the number of days into the current week that we are
	_trailingdays = 0
	while weekday - _trailingdays >= 0
	{
		_trailingdays++
	}

	//Get the number of weeks minus leading and trailing days
	_days -= _trailingdays
	_weeks = _days / 7
	_leadingdays = _days % 7

	//Add in the trailing weeks
	if _leadingdays > 0; _weeks++
	if _trailingdays > 0; _weeks++

	//Handles week 53
	if _weeks == 53
	{
		_daysleft = 31 - day
		if _daysleft + _trailingdays < 7; _weeks = 1
	}
	_weeks
}

//Sets the appropriate suffix for whatever number you pass in
NumSuffix : all
{
	_str = TOSTR(_argv[0])
	_last = SUBSTR(_str,STRLEN(_str) - 1,1)
	_last2 = SUBSTR(_str,STRLEN(_str) - 2,2)
	CVINT(_last2)
	
	_str //Add the number, suffixes added below
	
	//Handle teen numbers
	if _last2 >= 11 && _last2 <= 13
	{
		"th"
		return
	}
	
	//Everything else
	case TOINT(_last)
	{
		when 1; "st"
		when 2; "nd"
		when 3; "rd"
		others; "th"
	}
}

//From the GT template. Breaking down the day into a few distinct chunks so you dont have to add checks for every hour.
timeslot
{
	if hour >= 5 && hour <= 8; "earlymorning" 		//5-8am
	elseif hour >= 9 && hour <= 11; "morning" 		//9-11am
	elseif hour >= 12 && hour <= 14; "lunch" 		//12-2pm
	elseif hour >= 15 && hour <= 17; "afternoon" 	//3-5pm
	elseif hour >= 18 && hour <= 20; "evening" 		//6-8pm
	elseif hour >= 21 && hour <= 24; "latenight" 	//9pm-12am
	else; "midnight" 								//1-4am
}

//uhhhhhhhhhhhhhh kinda weird-ish if youre not in the same hemisphere/general area as vera but uh WHATEVER
//returns 1 if yes, it is daytime
daytime
{
	if hour >= 8 && hour <= 17; 1
	//8am-5pm
	elseif season == "Summer" && hour >= 6 && hour <= 19; 1 
	//6am-7pm
	else; 0
}

//This function is to help with changing text alignment in the same line! It makes a new line by using \n, displaying a space, and then going back up a line. So you'd use it like this:
//"Text on the left%(newline)\f[align,right]Text on the right"
newline
{
	"\n \_l[0]\n[-100]"
}

//Some lorem ipsum for when you need quick filler text
loremipsum
{
	"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}

//--uh oh! bad word filter!--------
//if ASEARCH(thingtosearch,InsertNameHereArray) != -1


//look man i gotta cover all the bases
WeirdNameArray
{
	"mom","dad","mommy","daddy"
}
//slurs and whatever ---------------- (BIG WARNING FOR ANYONE READING MY CODE!!!!!!!!!)
//ig ppl can circumvent this with like numbers n stuff but it's their fault at that point, not mine
CanYouNotArray
{
	"tranny","retard","faggot","dyke","nigger","nigga","beaner","shemale","midget","chink"
}

SwearJarArray
{
	"fuck","shit","dick","cock","bitch","bastard","cunt","slut"
}

