//---------------------------Envelopes--------------------------

//---Poses hell yeah!!---

//TODO: PUT IF/ELSE FOR FLORPUS SHELL, VERY IMPORTANT

//accountforshell
//{
	//if nowshell == "florpus"
	//{
		//
	//}
	//else
	//{
		//
	//}
//}

keroneutral
{
	//alright this envelope will be used to determine whether or not so display a kero when this is called. it also decides which kero to show, since i'm gonna have like, gaz zim and ely as keros. so i imagine it'd go something like this.
	/*
	if activekero == "Ely"
	{
		\s[2000]
	}
	elseif activekero == "Gaz"
	{
		\s[3000]
	}
	else
	{
		\s[-1]
	}
	*/
	//and so on. i'll do this for the rest of the emotions as well!
}

choosedibidle //a function for more variety when setting dib back to his idle.
{
	phoneidle
	dibidleyuh
	dibidleyuh
	dibidleyuh
}

dibidleyuh
{
	"\0\s[0]\i[91]\i[20]"
	"\0\s[0]\i[91]\i[21]"
	"\0\s[0]\i[21]"
	"\0\s[0]\i[20]"
	"\0\s[0]\i[93]\i[21]"
	"\0\s[0]\i[93]\i[20]"
	"\0\s[0]\i[93]\i[25]"
	"\0\s[4]\i[93]\i[21]"
}

phoneidle //he tappy on da phone
{
	//INTRO TEXT: "\0\s[11]\i[93]\w8\w2"
	"\0\s[18]\i[28]"
}

eyeroll
{
	"\0\s[0]\i[37]\i[70]\w4\0\s[0]\i[33]\i[70]\w4\0\s[0]\i[70]\w2\0\s[0]\i[35]\w2\0\s[0]\i[32]\w2\0\s[0]\i[36]\w3\0\s[0]\i[31]\i[70]"
}
eyerollsm
{
	"\0\s[2]\i[37]\i[70]\w4\0\s[2]\i[33]\i[70]\w4\0\s[2]\i[70]\w2\0\s[2]\i[35]\w2\0\s[2]\i[32]\w2\0\s[2]\i[36]\w3\0\s[2]\i[31]\i[70]"
}

fronteyeroll
{
	"\0\s[11]\i[37]\i[70]\w4\0\s[11]\i[33]\i[70]\w4\0\s[11]\w2\0\s[11]\i[35]\w2\0\s[11]\i[32]\w2\0\s[11]\i[36]\w3\0\s[11]\i[31]\i[70]"
}

dibarmfiddle
{
	"\i[93]"
	"\i[91]"
	"\i[90]"
}





exampleenvelope
{
	"Example Envelope Dialogue 1"
	"Example Envelope Dialogue 2"
	"Example Envelope Dialogue 3"
}

internalenvelope
{
	"Internal Envelope Dialogue 1 - %(exampleenvelope)"
	"%(username)'s computer"
	"Here is a blanklist object - %(blanklist)."
}

		//*********************Advanced User Info*******************************
	  
	  //One particularly useful thing you can do is add value changes to an envelope, if your dialogue is in a place where it's not easy to add the change directly. For example...
	  
	  //FeelingsGoUp
	  //{
	  //Feelings += 1
	  //"Thank you, %(username), that was really nice of you.\e"
	  //}
	  
	  //Another use for these envelopes is to shortcut certain long lines of SakuraScript you don't want to have to keep typing. A good example is if you want to change the font for a character. Take Papyrus from my Gaster ghost, he talks in the font Papyrus. But I don't want to have to type the tag for it for every line of dialogue he does. So instead I can put it in an envelope.
	  
	  //p
	//	{
	//	"\f[name,Papyrus UT]\f[height,16]"
	//	}
		
		//And then I can make one that'll change the font back to normal.
		
	//	d
	//{
	//"\f[name,default]\f[height,default]"
	//}
	
	//So in dialogue, to change fonts I'd just have to go "%(p)HEY THERE!%(d)" to change fonts back and forth quickly. These kind of shortcuts can be very useful.
	
	//Another way to use envelopes is to store multiple poses for SurfaceRestore in aitalk.dic. Gaster for example has several neutral idle poses, but also several poses for when he's scared. So I can make an envelope like
	
	//scared
	//{
	//"\0\s[9]\i[3]\i[104]\i[39]"
	//"\0\s[100]\i[2]\i[40]\i[104]"
	//"\0\s[100]\i[2]\i[40]\i[106]"
	//}
	
	//And have him randomly pick one whenever I use %(scared) in dialogue. This can be an easy way to vary certain poses without having to manually put them in one at a time, and have some variety when your ghost goes back to its neutral pose in SurfaceRestore.
		
	  //***********************************************************************

blanklist
{
	"List object 1"
	"List object 2"
	"List object 3"
	"List object 4"
	"List object 5"
}

blanklist2
{
	"List object 1"
	"List object 2"
	"List object 3"
	"List object 4"
	"List object 5"
	"List object 6"
	"List object 7"
	"List object 8"
}

blanklist3
{
	"List object 1"
	"List object 2"
	"List object 3"
	"List object 4"
}

blanklist4
{
	"List object 1"
	"List object 2"
}

usersfolder
{
	"%(username)'s Recycle Bin"
	"%(username)'s Document folder"
	"%(username)'s secret folder"
}


//Now, this next envelope is unique. I've called it a double envelope at times, but this is actually technically an array. Note that it has a word, a comma, then another word. This is essentially a list being stored in this envelope. You can call one of the values by using brackets around the number of the list entry. So, the first value (the Korean word) would be %(lessonkor[0]) since all arrays start at 0. The second value (the definition) would be %(lessonkor[1]). If you have a longer array, like "word,word,word,word,word", you can keep calling values by changing the numbers, like %(lessonkor[5]) or %(lessonkor[10]). Arrays can be very powerful and useful for storing a lot of information in a condensed space, but I must level with you, I'm not very good at arrays or figuring out how to use them. :B They can be VERY useful though, if you can wrap your head around how they work. An example of pulling information from this array can be seen in aitalk.dic.

lessonkor
{
	"사과(sa-gua),apple"
	"노동(no-dong),labor"
	"손가락(son-ga-rak),finger"
	"마르크스(ma-r-k-s),Marx"
	"자본주의(ja-bon-ju-yi),capitalism"
}

//You can also format your envelopes like this as one line separated by semicolons, but personally I think the spaced lists above look nicer. It's up to you however you want to set them up.

blanklistparagraph
{
	"List paragraph 1"; "List paragraph 2"; "List paragraph 3"; "List paragraph 4"; "List paragraph 5";
}


 //**** Don't touch this ***************************************************************
 On_\person
{
 	person
}
