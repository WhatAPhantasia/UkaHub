//---------------------------Envelopes--------------------------

//---Poses hell yeah!!---

//TODO: PUT IF/ELSE FOR FLORPUS SHELL, VERY IMPORTANT

//accountforshell
//{
	//if nowshell == "Florpus"
	//{
		//
	//}
	//else
	//{
		//
	//}
//}

/*
keroneutral
{
	//alright this envelope will be used to determine whether or not so display a kero when this is called. it also decides which kero to show, since i'm gonna have like, gaz zim and ely as keros. so i imagine it'd go something like this.
	//EDIT: yeah i'm axing this whole thing, dont need it + worried that it's too taxing on dib for now. keeping it commented
	
	if nowkeroname == "all" //this'll have to direct to a different mode instead of being keroneutral but then again this is only cosmetic at the moment so its not a big deal.
	{
		"\s[2000]\p[2]\s[3000]\p[3]\s[5000]"
	}
	elseif nowkeroname == "ely"
	{
		"\s[2000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "gaz"
	{
		"\s[3000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "zim"
	{
		"\s[5000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	else
	{
		"\s[-1]\p[2]\s[-1]\p[3]\s[-1]"
	}
	
	//and so on. i'll do this for the rest of the emotions as well!
	//there's DEFINITELY a better way to do this rather than if/elses and setting a variable to a name, siiiigh. maybe something with arrays? im not experienced with them tho soooooooooooo yeah
}
keroembarass
{
	if nowkeroname == "all" //honestly i'll just do this one manually so it doesnt matter lmao (but in theory this should set everyone that's out into their embarrased pose)
	{
		"\s[2001]\p[2]\s[3000]\p[3]\s[5000]"
	}
	elseif nowkeroname == "ely"
	{
		"\s[2001]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "gaz"
	{
		"\s[3000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "zim"
	{
		"\s[5000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	else
	{
		"\s[-1]\p[2]\s[-1]\p[3]\s[-1]"
	}
}
keroshock
{
	if nowkeroname == "all"
	{
		"\s[2002]\p[2]\s[3000]\p[3]\s[5000]"
	}
	elseif nowkeroname == "ely"
	{
		"\s[2002]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "gaz"
	{
		"\s[3000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "zim"
	{
		"\s[5000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	else
	{
		"\s[-1]\p[2]\s[-1]\p[3]\s[-1]"
	}
}
keroworry
{
	if nowkeroname == "all"
	{
		"\s[2003]\p[2]\s[3000]\p[3]\s[5000]"
	}
	elseif nowkeroname == "ely"
	{
		"\s[2003]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "gaz"
	{
		"\s[3000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "zim"
	{
		"\s[5000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	else
	{
		"\s[-1]\p[2]\s[-1]\p[3]\s[-1]"
	}
}
//more expressions inbetween here lmao--------
kerobored
{
	if nowkeroname == "all"
	{
		"\s[2006]\p[2]\s[3000]\p[3]\s[5000]"
	}
	elseif nowkeroname == "ely"
	{
		"\s[2006]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "gaz"
	{
		"\s[3000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	elseif nowkeroname == "zim"
	{
		"\s[5000]\p[2]\s[-1]\p[3]\s[-1]"
	}
	else
	{
		"\s[-1]\p[2]\s[-1]\p[3]\s[-1]"
	}
}
*/

choosedibidle //a function for more variety when setting dib back to his idle.
{
	phoneidle
	dibidleyuh
	dibidleyuh
	dibidleyuh
}

dibidleyuh
{
	"\0\s[0]\i[91]\i[20]"
	"\0\s[0]\i[91]\i[21]"
	"\0\s[0]\i[93]\i[21]"
	"\0\s[0]\i[93]\i[20]"
	"\0\s[0]\i[93]\i[25]"
	"\0\s[4]\i[93]\i[21]"
}

phoneidle //he tappy on da phone
{
	//INTRO TEXT: "\0\s[11]\i[93]\w8\w2"
	"\0\s[18]\i[28]"
	"\0\s[8]\i[23]"
}

eyeroll
{
	"\0\s[0]\i[21]\i[70]\w4\i[27]\w4\i[23]\w2\i[20]\w2\i[22]\i[203]\w2\i[26]\w3\i[21]\i[70]"
}
eyerollsm
{
	"\0\s[2]\i[21]\i[70]\w4\i[27]\w4\i[23]\w2\i[20]\w2\i[22]\i[203]\w2\i[26]\w3\i[21]\i[70]"
}

fronteyeroll
{
	"\0\s[11]\i[21]\i[70]\w4\i[27]\w4\i[23]\w2\i[20]\w2\i[22]\i[203]\w2\i[26]\w3\i[21]\i[70]"
}

dibarmfiddle
{
	"\i[93]"
	"\i[91]"
}





//----TEXT ENVELOPE!!!!!!!!!!!!!!!!!


//PRONOUNS!!
//"%(they) left that there."
//"%(their) work is really cool."
//"I'll ask %(them) later."
//"%(they)%(p('re','s')) really good at it."
//"%(they) %(p('are','is')) thinking about cheese!"
//"%(they) %(p('were','was')) lost in their code, but %(they) fixed it!!"
//use %(capitalize(they)) to use it properly at the start of sentences.
their
{
	if pronouns == "masc"; "his"
	elseif pronouns == "fem"; "her"
	elseif pronouns == "custom"; "%(custompronouns[2])"
	else; "their"
}
theirs
{
	if pronouns == "masc"; "his"
	elseif pronouns == "fem"; "hers"
	elseif pronouns == "custom"; "%(custompronouns[3])"
	else; "theirs"
}
they
{
	if pronouns == "masc"; "he"
	elseif pronouns == "fem"; "she"
	elseif pronouns == "custom"; "%(custompronouns[0])"
	else; "they"
}
them
{
	if pronouns == "masc"; "him"
	elseif pronouns == "fem"; "her"
	elseif pronouns == "custom"; "%(custompronouns[1])"
	else; "them"
}
//CHECK CONTEXT SINGULAR OR PLURAL!!//%(they) %(p('are','is'))
//You can change the name of this function if you want! I kept it short so it's fast to type (thank you zi)
p
{
	if pronounplur == "plur"; _argv[0] //they are
	else; _argv[1] //he is/she is
}

zimnonskoolplans
{
	"dumping Flamin' Hot Cheezo dust into the atmosphere"
	"using some weird alien chemical to poison the local Waffle House"
	"sending a large, mutated bird on a rampage through the city"
	"ripping out all the traffic lights in the city to make a weird rave machine"
	"taking GIR to Krazy Taco... Which isn't really evil, but GIR ate like, 6 babies"
	"taking over the local MacMeaties"
	"trying to become the King of Burrito King to \f[italic,1]control the masses\f[italic,0]"
}

zimskoolplans
{
	"poisoning the Skool lunch line"
	"replacing all the cleaning products in the janitor's closet with acid \i[65](which is admittedly better than the old cleaning products)"
	"getting Torque Smackey to... Bully me more than he already does" //I guess"
	"unleashing a horde of mutant gerbils in the Skool during lunch"
}



//wow...
		//*********************Advanced User Info*******************************
	  
	  //One particularly useful thing you can do is add value changes to an envelope, if your dialogue is in a place where it's not easy to add the change directly. For example...
	  
	  //FeelingsGoUp
	  //{
	  //Feelings += 1
	  //"Thank you, %(username), that was really nice of you.\e"
	  //}
	  
	  //Another use for these envelopes is to shortcut certain long lines of SakuraScript you don't want to have to keep typing. A good example is if you want to change the font for a character. Take Papyrus from my Gaster ghost, he talks in the font Papyrus. But I don't want to have to type the tag for it for every line of dialogue he does. So instead I can put it in an envelope.
	  
	  //p
	//	{
	//	"\f[name,Papyrus UT]\f[height,16]"
	//	}
		
		//And then I can make one that'll change the font back to normal.
		
	//	d
	//{
	//"\f[name,default]\f[height,default]"
	//}
	
	//So in dialogue, to change fonts I'd just have to go "%(p)HEY THERE!%(d)" to change fonts back and forth quickly. These kind of shortcuts can be very useful.
	
	//Another way to use envelopes is to store multiple poses for SurfaceRestore in aitalk.dic. Gaster for example has several neutral idle poses, but also several poses for when he's scared. So I can make an envelope like
	
	//scared
	//{
	//"\0\s[9]\i[3]\i[104]\i[39]"
	//"\0\s[100]\i[2]\i[40]\i[104]"
	//"\0\s[100]\i[2]\i[40]\i[106]"
	//}
	
	//And have him randomly pick one whenever I use %(scared) in dialogue. This can be an easy way to vary certain poses without having to manually put them in one at a time, and have some variety when your ghost goes back to its neutral pose in SurfaceRestore.
		
	  //***********************************************************************

exampleenvelope
{
	"result 1"
	"result 2"
	"result 3"
}

usersfolder
{
	"start bar"
	"Documents folder"
	"Pictures folder"
	"Music folder"
	"Games folder"
}

filetype
{
	".txt"
	".dic"
	".png"
	".jpg"
	".jpeg"
	".mp3"
	".exe"
	".bat"
	".cfg"
	".wav"
	".pdf"
	".dat"
	".gif"
	".tiff"
	".dll"
	".pna"
	".ico"
	".dau"
	".zip"
	".nar"
	".html"
	".psd"
	".mp4"
	".ttf"
	".rar"
}

nonskoolmonths {6,7,8}
weekend {0,6}

//-----Menu stuff-----

season //Current season
{
	if hemisphere == "Southern"
	{
		if month > 2 && month < 6; "Autumn"
		elseif month > 5 && month < 9; "Winter"
		elseif month > 8 && month < 12; "Spring"
		else; "Summer"
	}
	else
	{
		if month > 2 && month < 6; "Spring"
		elseif month > 5 && month < 9; "Summer"
		elseif month > 8 && month < 12; "Autumn"
		else; "Winter"
	}
}

//hour12 displays the hour like a 12 hour clock, except for 12 which is displayed as 0
nowhour
{
	if hour12 == 0; "12"
	else; "%(hour12)"
}

//Adding a 0 to the minute if it's under 10
nowmin
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

//Total hours
totalhours {x.up_total / 60}

//Total hours + minutes
totalruntime
{
	_hours = x.up_total / 60
	_mins = x.up_total % 60
	if _mins <= 9; _mins = "0%(_mins)"
	
	"%(_hours):%(_mins)"
}

//Current runtime as hours + minutes
runtime
{
	_hours = x.up_mins / 60
	_mins = x.up_mins % 60
	if _mins <= 9; _mins = "0%(_mins)"
	
	"%(_hours):%(_mins)"
}

//AM or PM - ampm is 0 during am, and 1 during pm
ap
{
 	if ampm == 0; "AM"
 	else; "PM"
}

//Abbreviated week day
wd
{
	if weekday == 0; "Sun"
	elseif weekday == 1; "Mon"
	elseif weekday == 2; "Tue"
	elseif weekday == 3; "Wed"
	elseif weekday == 4; "Thu"
	elseif weekday == 5; "Fri"
	else; "Sat"
}

//Full week day
nowday
{
	_weekday = weekday
	if _argv[0] == "next"
	{
		_weekday++
		if _weekday > 6; _weekday = 0
	}
	if _argv[0] == "last"
	{
		_weekday--
		if _weekday < 0; _weekday = 6
	}
	
	if GETTYPE(_argv[0]) == 1 //If it's an integer
	{
		while _argv[0] > 6; {_argv[0] -= 7}
		while _argv[0] < 0; {_argv[0] += 7}
		_weekday = _argv[0]
	}
	
	if _weekday == 0; "Sunday"
	elseif _weekday == 1; "Monday"
	elseif _weekday == 2; "Tuesday"
	elseif _weekday == 3; "Wednesday"
	elseif _weekday == 4; "Thursday"
	elseif _weekday == 5; "Friday"
	else; "Saturday"
}

//The current month name
nowmonth
{
	_month = month
	
	if _argv[0] == "next"
	{
		_month++
		if _month > 12; _month = 1
	}
	if _argv[0] == "last"
	{
		_month--
		if _month < 1; _month = 12
	}
	
	if GETTYPE(_argv[0]) == 1 //If it's an integer
	{
		while _argv[0] > 12; {_argv[0] -= 12}
		while _argv[0] < 1; {_argv[0] += 12}
		_month = _argv[0]
	}
	
	if _month == 1; "January"
	elseif _month == 2; "February"
	elseif _month == 3; "March"
	elseif _month == 4; "April"
	elseif _month == 5; "May"
	elseif _month == 6; "June"
	elseif _month == 7; "July"
	elseif _month == 8; "August"
	elseif _month == 9; "September"
	elseif _month == 10; "October"
	elseif _month == 11; "November"
	else; "December"
}

//Checks if this is a leap year
leapyear
{
	if year % 4 != 0; 0
	elseif year % 100 != 0; 1
	elseif year % 400 != 0; 0
	else; 1
}

//Gets the day of the year it currently is, starting from 1 because starting from 0 here is silly
yearday {GETTIME[7] + 1}

yearweek
{
	//Get the current day of the year
	_days = yearday

	//Get the number of days into the current week that we are
	_trailingdays = 0
	while weekday - _trailingdays >= 0
	{
		_trailingdays++
	}

	//Get the number of weeks minus leading and trailing days
	_days -= _trailingdays
	_weeks = _days / 7
	_leadingdays = _days % 7

	//Add in the trailing weeks
	if _leadingdays > 0; _weeks++
	if _trailingdays > 0; _weeks++

	//Handles week 53
	if _weeks == 53
	{
		_daysleft = 31 - day
		if _daysleft + _trailingdays < 7; _weeks = 1
	}
	_weeks
}

//From the GT template. Breaking down the day into a few distinct chunks so you dont have to add checks for every hour.
timeslot
{
	if hour >= 5 && hour <= 8; "earlymorning" //5-8am
	elseif hour >= 9 && hour <= 11; "morning" //9-11am
	elseif hour >= 12 && hour <= 14; "lunch" //12-2pm
	elseif hour >= 15 && hour <= 17; "afternoon" //3-5pm
	elseif hour >= 18 && hour <= 20; "evening" //6-8pm
	elseif hour >= 21 && hour <= 24; "latenight" //9pm-12am
	else; "midnight" //1-4am
}

//--uh oh! word filter!--------
//if ASEARCH(thingtosearch,InsertNameHereArray) != -1

SwearJarArray
{
	"fuck","shit","dick","cock","bitch","bastard","cunt","slut"
}


 //**** Don't touch this ***************************************************************
 On_\person
{
 	person
}
