//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue!


//levidre i am so sorry for stealing basically all my font code from zim :sob: idk how to code

OnNotifyBalloonInfo
{
	balloonname = "%(reference0)"
	balloonpath = "%(reference1)"
}

OnBalloonChange
{
	balloonname = "%(reference0)"
	balloonpath = "%(reference1)"
}

OnNotifyFontInfo
{
	_i = SAORI("saori\fontinstaller","get","Irken Normal (TrueType)")
	if "%(_i)" != "0" && hastranslator == -1
	{
		hastranslator = 0
	}
}

//--OnFirstBoot--

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. You CAN get it to run using \![raise,OnFirstBoot,0] though.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************

OnFirstBootVar
{
	hastranslator = 0
	lookdirection = 1
	nowkeroname = "none"
	
 	username         = "you" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
 	aitalkinterval = 300 //Their default talk rate.
	mikireflag       = 0	// Determines behavior at certain points.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = " 5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic).
	nowshell = "master" //just in case :)
	
	firstboot = 1
	uninstallStatus = reference0
}

OnFirstBoot
{
	OnFirstBootVar
	--
	"\![enter,passivemode]"
	--
	_i = SAORI("saori\fontinstaller","get","Irken Normal (TrueType)")
	if "%(_i)" == "0"
	{
		"\1\s[-1]\0\s[-1]The Irken font isn't installed. Some dialogues need this font. Do you want to install it?\n\n[half]\![*]\q[Yes,installirken]     \![*]\q[No,nofont]"
	}
	else
	{
		chooseshell
	}
}

Select.chooseshell
{
	"(Do you want to use the Shooting Star shell or the Florpus shell?)\n\n\_q\![*]\q[Shooting Star,fanonplease] - A more fanon look, very tall\n\![*]\q[Florpus,canonplease] - More ETF adjacent, looks nice next to Levidre's Zim ghost (less in-depth)"
}

Select.fanonplease
{
	nowshell = "master"
	"(This shell is very big: Please resize him by right clicking on him and choosing the percentage you want in Shell Scaling.)\n\n[half](You can change his look by going to the Change Shell menu option.)\x\c"
	--
	if firstboot = 1
	{
		OnFirstBootTalk
	}
}

Select.canonplease
{
	nowshell = "florpus"
	"(You can change his look by right clicking on Dib and going to the Change Shell menu option.)\x\c"
	--
	if firstboot = 1
	{
		OnFirstBootTalk
	}
}

Select.installirken
{
	_i = SAORI("saori\fontinstaller","install","Irken Normal (TrueType)",balloonpath + "Irken.ttf")
	if "%(_i)" == ""
	{
		"(Font installed.)\n\n[half]"
	}
	else
	{
		if "%(_i)" != ""
		{
			"(There has been an issue installing the Irken font : %(_i))\n(You can install it manually with the files in the Swollen Eyeball balloon. All irken dialogue will be locked until the font is installed.)\n\n[half]"
			hastranslator = -1
		}
		else
		{
			hastranslator = 0
			"\n[half]"
		}
		
	}
	--
	if firstboot = 1
	{
		chooseshell
	}
}

Select.nofont
{
	"(Any dialogue that has irken text will not appear until the font is downloaded.)\n\n[half]"
	hastranslator = -1
	--
	if firstboot == 1
	{
		chooseshell
	}
	else
	{
	}
}


OnFirstBootTalk
{
	if uninstallStatus == 0
 	{
		"\1\s[-1]\0\s[0]Ah- \w4It worked! The spelldrives still work!! I can't believe I'm... \w2Uh, wherever here is! \w8Wait, what does Digital Jump mean, anyway? And- \w2Why did it only cost two power points? \w4\n\n[half]Oh, nevermind that!! \w2This looks like... A desktop! Pretty cool... \w5\w5If this is a desktop, then it must belong to someone, right? \w8\n.\w2.\w2.\w8\w8\n\n[half]Oh. \w5Hi! \w3I've just been \w2talking to myself this whole time, I didn't even notice you were- \w2Whatever! \w8\n\nHow should I refer to the person who I'll be spending my desktop-hanging time with, huh?\n\n[half]/
		\w5\_q\![*]\q[He/Him,choicefirsthehim]\n/
		\![*]\q[She/Her,choicefirstsheher]\n/
		\![*]\q[They/Them,choicefirsttheythem]\e"
 	}
	else
 	{
		//---- You'll see this if you try to run OnFirstBootTalk using ![raise] without the extra 0 as mentioned above.
 		{
 		"\1\s[-1]\0\s[0]Aha! Now- \w8Wait, here again? \w5I guess I should have expected that... \w8\n\n[half]Hey again. \w2Just to make sure this is actually the same place, how should I refer to you?\n\n[half]/
		\w5\_q\![*]\q[He/Him,choicefirsthehim]\n/
		\![*]\q[She/Her,choicefirstsheher]\n/
		\![*]\q[They/Them,choicefirsttheythem]\e"
		}
 	}
}

//*********************Advanced User Info*******************************
//Notice that after the values are set, there's a -- and then it loads up the next function in the sequence. You can use this basic method to set many values at once, then go to the same function afterwords.

//To define a value, you use a single = mark. If it's a word, you need to put it in quotation marks, but if it's a number, you do not. See the walkthrough page on coding for details.

//Notice how each choice is formatted as Select.choice. This is what I was talking about above with the difference between OnFunction and Function. These choices do not start with On, so they must begin with Select. instead. If you're setting up some quick choices for a menu you're only going to do once, then don't be afraid to use select. instead of having everything start with On.
//***********************************************************************

Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	//---updated pronouns
	their = "his"
	theirs = "his"
	they = "he"
	them = "him"
	theyre = "he's"
	theywere = "he was"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	//---updated pronouns
	their = "her"
	theirs = "hers"
	they = "she"
	them = "her"
	theyre = "she's"
	theywere = "she was"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "theirs"
	hesshes = "they're"
	//---updated pronouns
	their = "their"
	theirs = "theirs"
	they = "they"
	them = "them"
	theyre = "they're"
	theywere = "they were"
	--
	NameInput
}


//--NameInput

NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this!
	
	"\0\s[0]\![leave,passivemode](Now, enter your name.)\![open,inputbox,OnNameTeach,-1]\e"
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

dayslot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.

//You can also stick any values you want to reset on boot into their own function, like "BootReset", then run BootReset instead during boot so it's a bit less unwieldy. It's up to you though!
//***********************************************************************

OnBootVar
 {
 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 }
 OnBoot
 {
	OnBootVar
	OnDiscordPluginBoot
	--
	temppose = OnBootPhaseOne
	OnUpdateCoordinates
 }
 OnBootPhaseOne
 {
 	"\0\s[0]\1\s[2000]" //This sets them up in their neutral pose for now.
	
	//put %(normalboottalk) if u dont want indiv day messages
	//"\0\s[0]\1\s[10]%(normalboottalk)"
	--
	if dayslot == userbirthday 
	{
		"\0\s[0]It's %(bornmonthprint) %(borndayprint). \w4I've kinda been looking forward to today, cause it's your birthday, right? \w8Happy birthday, %(username).\e" 
		//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	
	elseif dayslot == "6month 6day" 
	{
		"\0\s[0]Today is June 6th.\e"
	}
	elseif dayslot == "7month 4day"
	{
		"\0\s[0]It's the fourth of July.\e"
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk will vary their dialogue in a few different ways depending on the time and weekday. If you don't want to use these, you can delete everything under normalboottalk and write your own lines of general boot dialogue, so it'd look something like.

//normalboottalk
//{
//[insert your general boot dialogue here]
//}

//Otherwise, just replace the upcoming pieces of dialogue with what you like.


normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
		"\0\s[0]It's Saturday night.\e"
		}
	elseif RAND(100) < 40 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
		{
		"\0\s[0]This is one of the random boot conversations. The random number drawn was less than forty.\e"
	
		"\0\s[0]This is another one of the random boot conversations. The random number was again less than forty.\e"
	
		"\0\s[0]This is the third random boot conversation. The random number was less than forty.\e"
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
		"\0\s[0]This is an early morning boot dialogue. \w8Between the hours of five and eight.\e"
		
		"\0\s[0]This is another early morning boot dialogue. \w8Again, between the hours of five and eight.\e"
		
		"\0\s[0]This is the third early morning boot dialogue. \w8Between the hours of five and eight.\e"
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]This is a morning boot dialogue.\e"
		
		"\0\s[0]This is another morning boot dialogue.\e"
		}
		elseif timeslot == "lunch"
		{
		"\0\s[0]This is a lunch boot dialogue.\e"
		
		"\0\s[0]This is another lunch boot dialogue.\e"
		}
		elseif timeslot == "afternoon"
		{
		"\0\s[0]This is an afternoon boot dialogue.\e"
		}
		elseif timeslot == "evening"
		{
 		"\0\s[0]This is an evening boot dialogue. Between the hours of 18 and 20.\e"
		}
		elseif timeslot == "latenight"
		{
 		"\0\s[0]This is a late night boot dialogue. Between 21 and 24.\e"
		
 		"\0\s[0]This is another late night boot dialogue.\e"
		
 		"\0\s[0]This is the third late night boot dialogue. \w8Between 21 and 24.\e"
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
				if weekday == 0
				{
					"\0\s[0]Oh... You're up, too? \w4Don't know why I'm doing this to myself... It's a Skoolday tomorrow. \w2Or today?\w8"
				}
		
				"\0\s[0]Mnnhuh? \w2Oh. \w4Why are you up?\w8"
		
				"\0\s[0]...Shouldn't you be asleep?\w8\e"
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose
//{
//[insert your dialogue here]
//}
//if you don't want to deal with the time slots. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Like above with OnBoot, just replace all the following pieces of dialogue with your own. Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 40 //see above about the random number generator
			{
				"\0\s[0]This is a random close dialogue. \w8The random number generator chose something below 40.\w8\w8"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\0\s[0]This is an early morning close dialogue.\w8"
					
					"\0\s[0]This is another early morning close dialogue.\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[0]This is a morning close dialogue.\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[0]This is a lunch close dialogue.\w8"
					
 					"\0\s[0]This is another lunch close dialogue.\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[0]This is an afternoon close dialogue.\w8"
					
 					"\0\s[0]This is another afternoon close dialogue.\w8"
 				}
  			elseif timeslot == "evening"
 				{
 						if weekday == 6 //here, a nested if statement is checking that if it's evening, is it also saturday? You can do this to check more specific times on other days as well. You can change this to some other day if you want, or just delete this little if/else section entirely and write your own evening related close dialogue.
 						{
 							"\0\s[0]This is a Saturday evening close dialogue.\w8"
 						}
 						else //if it's not saturday, then it'll do this dialogue instead.
 						{
 							"\0\s[0]This is an evening close dialogue.\w8"
							
 							"\0\s[0]This is another evening close dialogue.\w8"
 						}
 				}
			elseif timeslot == "latenight"
			 	{
 						if weekday == 6 //This is the same check as above to see if it's Saturday. Note that this doesn't have an else statement! Sometimes you can get away with that, but make sure you test thoroughly.
						//Of course, you can also cut this check entirely if you want.
 						{
 							"\0\s[0]This is a late Saturday night close dialogue.\w8"
							
 							"\0\s[0]This is another late Saturday night close dialogue.\w8"
 						}
						
 						"\0\s[0]This is a late night close dialogue.\w8"
						
						"\0\s[0]This is another late night close dialogue.\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\0\s[0]Yeesh, do you have anything tomorrow? \w2Or today, I guess. \w4You should get some rest.\w8"
 						}
						
						"\0\s[0]This is another middle of the night close dialogue.\w8"
						
						"\0\s[0]This is the third middle of the night close dialogue.\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[0]That was short. Did you get me by accident?\w8\w8"
		
 		"\0\s[0]Uh, okay. See you!\w8\w8"
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

 OnWindowStateMinimize
 {
	"\0\s[0]I'm being minimized, I think.\w5\e"
}

OnWindowStateRestore
 {
	"\0\s[0]Back out.\e"
	"\0\s[0]Y'know, being on a computer is a very interesting experience.\e"
	"\0\s[0]Woah! It's kinda cramped down there...\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost or the Developer's Console->Reload->Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Dib"
	{
		"\0\s[2]\i[91]\i[77]Ely, you are a mess. \w4Fix me already! \w2\0\s[2]\i[91]\i[77]\i[65](also change this dialogue later lmao)\w8\w8\e"
		"\0\s[0]\i[76]\i[91]How many times are you gonna reload me today?\w8\w8\e"
		"\0\s[2]\i[96]\i[73]Let's play 'Will Dib Be Broken When You Reload Him Or Not?'\w8\w8\e"
		"\0\s[0]\i[91]\i[70]Okay, okay, let's just get this over with.\w8\w8\e"
	}
	elseif reference0 == "Zim"
	{
		"\0\s[3]\i[70]\i[91]Ugh, ZIM? \w4Have fun, I guess.\w8\w8\e"
		"\0\s[3]\i[91]\i[29]ZIM?! \w5\0\s[3]\i[91]\i[78]Don't tell him anything that could defeat me!\w8\w8\e"
	}
 	else
	{
		"\0\s[0]\i[91]Switching to %(reference0).\w8\w8\e"
		"\0\s[0]\i[92]\i[76]How did %(reference0) get here? \w3I doubt they have spelldrives.\w8\w8\e"
		"\0\s[0]\i[92]\i[76]Hm, %(reference0)? \w6\0\s[0]\i[96]\i[76]Your desktop seems to be a popular hangout place.\w8\w8\e"
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]\1\s[2000]" //this sets up their default poses
	--
	if reference0 == "Dib" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[2]\i[96]Better?\w8\e"
		"\0\s[0]\i[91]Code all sorted?\w8\e"
		"\0\s[0]Back again. \w6\0\s[2]\i[96]Hey, %(username)!\w8\e"
		//me specific dialogue
		"\0\s[0]\i[76]\i[91]...How many times have you looped that ZIM cover of Situations? \w8\0\s[2]\i[78]\i[91]It's hilarious, keep it on.\w8\e"
		"\0\s[14]\i[24]Uh, %(username)... \w8\w8\w2\0\s[11]\i[24]\i[76]Where did you get that song? \w8And how many times have you looped it?\w8\w4\n\n[half]\0\s[21]\i[21]\i[92]\i[70]I'll admit, his singing voice is...\w8\e"
		"\0\s[22]\i[93]\i[72]On my touch-tone, touch-tone telephone...\w8\e"
	}
	elseif reference0 == "Zim"
	{
		"\0\s[0]\i[91]\i[76]Hey, ZIM was just here! \w6\0\s[12]\i[76]\i[92]You think you can tell me his weaknesses?\e"
	}
	else
	{
		"\0\s[0]\i[91]\i[76]%(reference0), huh? \w6\0\s[11]\i[76]\i[92]How many other people do you have on here, %(username)?\e"
	}
}


//--OnShellChanging

//Literal suffering. Even making the florpus shell hurt me. Whoever makes a shell for anything, you have my greatest respect.
//Making a shell for this ghost would be nigh impossible without changing some of the interval coding, huh? bc i barely set up any expression envelopes haha, and also his eyes and shit are super complicated. I am so sorry.

OnShellChanging
 {
	if reference0 == "Shooting Star" 
	{
	"\0\s[0]\i[91]Hm?\w8\e"
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]\i[91]Hm?\w8\e"
	
	"\0\s[0]\i[91]Oh, alright.\w8\e"
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "Shooting Star" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[2]\i[91]Back to the good ol' Shooting Star. \w4\0\s[0]\i[76]\i[26]\i[91]How many people actually read that thing?\e"
		"\0\s[2]\i[91]Nice! \w8\0\s[2]\i[91]\i[73]This is exactly the size my head should be!\e"
		"\0\s[2]\i[78]\i[92]With this height, I could probably kick ZIM into the stratosphere.\e"
 	}
 	elseif reference0 == "Florpus"
 	{
 		nowshell = "florpus"
		
 		"\0\s[2]\i[91]Slipping into something more familiar.\e"
 		"\0\s[3]\i[22]\i[77]\i[96]Aw, \w2now my head's bigger...\e"
 	}
 	else //For any shell without a specific name
 	{
	"\0\s[2]\i[91]Changed to %(reference[0]). \w4A new look!\e"
	}
 }

//--OnNotifyShellInfo

//HOOO boy i figured this one out through 10 minutes of research on documentation and the discord. I work so hard for Dib.
//SO BASICALLY. reference0 is the name of the shell, reference1 is the full path, and reference2 is the surface number list [comma separated] Example: 0,1,2,3,4,5,6,7,8,10,11. So yeah!! Currently using this in the dressup to check if Dib is in his Florpus shell, so it can make a tiny quip about there basically being no difference. I could probably do some other shell exclusive stuff here, though.

//UPDATE IM AN IDIOT NOWSHELL ALREADY EXISTS JUST USE THAT LMAO. keeping this here for posterity

/*OnNotifyShellInfo
{
		currentShell = reference0
}*/

 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Make sure to read the clothing page on the walkthrough for details on how clothes work! This template won't have any because Girl and Triangle move around too much for it, but if your ghost is mostly stationary, clothes are an option. In that case, these functions are for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Glasses" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //If you put it on
			{
				"\0\s[11]Oh- \w6Finally. \w8\0\s[0]\i[70]\i[76]\i[91]Do you really think that's funny?\e"
			}
			else //When you take it off.
			{
				if nowshell == "florpus"
				{
					"\0\s[3]\i[39]What- \w8\w4\0\s[3]\i[78]\i[91]Hey! \w4Give that back! \0\s[3]\i[78]\i[91]\i[65]\w8\n\n[half](You barely notice a difference...)\e"
				}
				else
				{
					"\0\s[13]\i[43]What- \w8\w4\0\s[13]\i[78]\i[91]Hey! \w4Give that back!\e"
				}
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "Gameslave"
		{
			if reference2 == 1 
			{
			"\1\s[10]She still looks annoyed, just... Less so.\e"
			}
			else
			{
			"\1\s[10]...\e"
			}
		}
	elseif reference1 == "Glasses"
		{
			if reference2 == 1
			{
			"\1\s[10]...\w8\0\s[0]Gaz! You got my glasses back! \w8\1\s[10]\n\n[half]Huh? No, these are mine. \w2\0\s[0]\n\n[half]Gaz!!\e"
			}
			else
			{
			"\1\s[10]She doesn't seem to have noticed you taking them.\e"
			}
		}
	}
}

//thank you zi for coding literally everything in here. i um. i don't understand any of this
OnNotifyDressupInfo
{
    _reference = reference
    
    currentdressups = "" //This one is so we can display which dressups are currently in use
    
    foreach _reference; _dressup
    {
        for _i = 3; _i < ARRAYSIZE(_dressup); _i++
        {
            if _dressup[_i] == "default" || _dressup[_i] == "" || _dressup[_i] == "mustselect" || _dressup[_i] == "multiple"; continue
            
            if _dressup[_i] == "1"
            {
                if currentdressups != ""; currentdressups += ","
                currentdressups += _dressup[1] + "|" + _dressup[2]
            }
        }
    }
}
//every time it loads or the dressups change you should get a list of all the current dressups. They're formatted like so: "Category|Piece,Category|Piece"
//So you can do a search for, say, if "Hair|Braid" _in_ currentdressups
