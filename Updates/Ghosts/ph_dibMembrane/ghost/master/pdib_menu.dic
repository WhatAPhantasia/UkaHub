//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus for each of your ghosts. If you don't want to have menus for your characters, you'd just have to delete the OnMouseDoubleClick functions near the end of mouse.dic and then ignore this file, as none of it will be called I believe. Menus can be cool though, since you can put stuff in them and create new functions if you know what you're doing. For example, I've added a lot of games and interactions and little linked icons to my Hunter Smoker ghost to keep track of their feelings and such. Much of that is pretty complicated though (and kind of messy, cough), so I won't go into it here, but I covered some of the concepts in the coding page of the walkthrough, and enterprising ghost makers can study the menu.dic file I set up for Hunter/Smoker and see how I put it together.

//(http://www.ashido.com/ukagaka/)


//--OpenSakuraMenu
OpenSakuraMenu
{
	if firstboot == 1
	{
		firstboot = 0
		"\0\s[0]Oh, uh, I don't think I finished introducing myself... I guess you can tell me more about yourself later, yeah? \n\i[65](Update your information in the settings!)\x"
	}
	else
	{
		"\0\s[0]\i[91]\b2Yeah? What's up?"
		"\0\s[0]\i[76]\b2Need something?"
		"\0\s[2]\i[72]\i[65]\i[93]\b2(He's humming something to himself.)"
		--
		MenuRun
	}
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu. If you're going to be adding or changing functions, this is where you'll be doing your edits.

MenuRun : all
{	
	"\n\n\_q\b2\![set,autoscroll,disable]"
	
	"(You want him to...)\n\n[half]"
	
	if lastTalk != ""
	{
	  //"\![*]\q[Repeat what he said,OnLastTalk]\n"
	  "\![*]\q[Say that again,OnLastTalk]\n"
	}
	
	"\![*]\q[Say something,OnAiTalk]\n"
	//"\![*]\q[Talk to you,OnAiTalk]\n"
		
	"\n(You could interact with him...)\n\n[half]"
	
	"\![*]\q[Ask something,asktheboy]\n"
	"\![*]\q[Do something,acttheboy]\n"
	"\![*]\q[Give me a fact,funfact]\n"
	"\![*]\q[Play music,OnMusicMenu]\n"
	
	"\n(Or you could ask him to...)\n\n[half]"
	
	"\![*]\q[Check your settings,OnConfigMenu]\n"
	"\![*]\q[Do something for you,dosomething]\n\n"
	
 	"\![*]\q[Nevermind,CANCEL]\n\n[half]"
	"%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}


Select.BACKTOMENU
	{
		MenuRun
	}

//*********************Advanced User Info*******************************
//As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option.
//***********************************************************************

//----------ASK THE MAGIC DIB!----------------------------------------------

Select.asktheboy
{
	"\b2\0\s[0]Oh! I bet I can answer them."
	"\b2\0\s[0]And I have answers."
	"\b2\0\s[0]Yeah?"
	--
	DibQuestions
}

DibQuestions : all
{	
	"\n\n\![*]\q[Can I see another friend?,debugkero]\n"
	if debug == 1 //%(debug = 1) in script input to show the debug options
	{
		"\![*]\q[Test Variable,OnTestVar]\n"
		"\![*]\q[To-do list,OnTemplateTodo]\n"
		"\![*]\q[Set Variables,OnSetVar]\n"
	}
	"\n"
	
	"\![*]\q[Back,BACKTOMENU]\e"
}

Select.debugkero
{
	"\0\s[0]%(dibarmfiddle)"
	--
	//"Oh, \w1okay. \w6Who do you wanna see? (this menu is only for debug/cosmetic purposes atm)"
	"...Actually, Phantasia axed this whole debug thing because it was unneeded. These options don't do anything anymore, unless you uncommented all the relevant stuff I guess."
	--
	"\n\n\![*]\q[No one,choosekeronone]    /
	\![*]\q[Ely!,choosekeroely]    /
	\![*]\q[Gaz!,choosekerogaz]    /
	\![*]\q[ZIM!,choosekerozim]\n/
	\![*]\q[EVERYONE,choosekeroall]\n\n"
	--
	"\![*]\q[Back,BACKTOQNA]\e"
}

Select.BACKTOQNA
{
	DibQuestions
}

Select.choosekeronone
{
	//nowkeroname = "none"
	//--
	//"\1%(keroneutral)"
	//--
	"\0\i[24]\i[70]Oh, yeah, definitely getting crowded around here. Even if there was no one here in the first place. This is a debug thing im not coding for every single possibility."
}
Select.choosekeroely
{
	//nowkeroname = "ely"
	//--
	//"\1%(keroneutral)"
	//--
	"\0\s[2]\i[72]\i[77]\i[85]oh my gosh........ ely........ my love (LMAO)\e"
}
Select.choosekerogaz
{
	//nowkeroname = "gaz"
	//--
	//"\1%(keroneutral)"
	//--
	"\0\s[2]OH HEY GAZ!!!\e"
}
Select.choosekerozim
{
	//nowkeroname = "zim"
	//--
	//"\1%(keroneutral)"
	//--
	"\0\s[3]\i[78]Wait- \w5HIM?! \w8\w8Ugh. \w8Okay. \w8Sure.\e"
}
Select.choosekeroall
{
	//nowkeroname = "all"
	//--
	//"\1%(keroneutral)"
	//--
	"\0\s[3]\i[21]Oh gosh that's a lot of. \w6\s[3]People.\e"
}

//----------SILLY ACTING TIME-----------------------------------------------

Select.acttheboy { DibAct }

DibAct : all
{
	"This'll redirect to an act menu!\e"
}


//----------FUN FACTS GALORE------------------------------------------------

Select.funfact
{
	SelectFactTopic
}

SelectFactTopic : all
{
	"\_q"
	
	"\![*]\q[Cryptids,factCryptid]\n"
	"\![*]\q[UFOs & Aliens,factAlien]\n"
	"\![*]\q[Mythical Creatures,factMyth]\n"
	"\![*]\q[Ghosts,factGhost]\n"
	"\![*]\q[Space,factSpace]\n"
	"\![*]\q[Self-Care,factSelfcare]\n"
	
	"\n\![*]\q[Back to the menu,BACKTOMENU]\e"
}



//----------OH BOY IT'S MUSIC TIME------------------------------------------

Select.gotomusic
{
	"\0\s[0]ooh yeah music players are tough, figure this one out later\e"
}

//--CONFIG MENU: TALKCONFIG
OnConfigMenu : all
{
	FixDefaultOptions
	
	if "OnUserBorn" _in_ reference0; {birthday = oldbirthday; ERASEVAR("oldbirthday")} //resets the birthday to the old values, erases the temp variable
	"\0\_q\b2\![close,inputbox,%(reference0)]"
	
	"\f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\_a[OnChangeName]Change it?\_a)\f[sup,0]\n"
	"\f[bold,1]Your pronouns:\f[bold,0] %(capitalize(they))/%(capitalize(them)) \f[sup,1](\_a[OnChangePronoun]Change them?\_a)\f[sup,0]\n"
	"\f[bold,1]Your birthday:\f[bold,0] %(birthday[0]) \f[sup,1](\_a[OnChangeBirthday]Change it?\_a)\f[sup,0]\n\n"
	"\f[bold,1]Talk Rate:\f[bold,0] - %(capitalize(talkrate)) \f[sup,1](\q[Change it,talkinter])\f[sup,0]\n\n"
	
	"\f[bold,1]Stats:\f[bold,0] Insert cool stats here\n\n"
	
	"\![*]Enable Uninstall? \_a[OnToggleUninstall]%(deleteshitai)\_a\n\n"
	
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}

FixDefaultOptions
{
	if username == ""; username = "you"
	if birthday[0] == ""; birthday[0] = "???"
	if talkrate == ""; {talkrate = "every 5 minutes"; aitalkinterval = 300}
	if deleteshitai == ""; deleteshitai = "OFF"
	if pronouns == ""; pronouns = "undef"
	if (pronounplur != "plur") || (pronounplur != "sing") {
		if pronouns == "undef"; pronounplur = "plur"
		else; pronounplur = "sing"
	}
	//if hemisphere == ""; hemisphere = "Northern"
	//if AutoUpdates[0] == ""; AutoUpdates[0] = "On"
	//if HourNotifs == ""; HourNotifs = "On"
}


OnToggleUninstall
{
	if deleteshitai != "ON"; deleteshitai = "ON"
	else; deleteshitai = "OFF"
	--
	OnConfigMenu
}


//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 	{
 		"\0\s[0]\b2How often should I speak? \w8The interval is currently set to %(talkrate)./
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
 		\0\n\n[half]/
 		\![*]\q[Every 30 seconds,TALKMAX]\n/
		\![*]\q[Every minute,TALKHIGH]\n/
 		\![*]\q[Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[Every 5 minutes,TALKPOOR]\n/
 		\![*]\q[Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[Don't change,TalksTill]\e"
	}

//If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I wouldn't recommend it, it'd just be confusing I'm sure.
Select.TalksTill
	{
		"\0\s[0]Alright, I'll just... Keep doing \w2what I was doing.\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talkrate = "every 30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[2]\i[91]Alright, I can do that! \w4\0\s[0]\i[26]\i[91]People say I talk too much, actually.\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talkrate = "every minute"
		aitalkinterval = 60
		
 		"\0\s[0]\i[91]Got it, every minute.\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talkrate = "every 3 minutes"
		aitalkinterval = 180
		
 		"\0\s[0]\i[91]Sounds reasonable. Every three minutes, then.\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talkrate = "every 5 minutes"
		aitalkinterval = 300
		
 		"\0\s[0]\i[91]Every five minutes, got it.\e"
	}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talkrate = "never"
		aitalkinterval = 0
		
		"\0\s[2]\i[77]...Okay, I'll try.\e"
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
	{
		
 	}

	
//Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.

Select.dosomething
{
 		"\0\s[0]\b2I mean, while I'm here, might as well.\n\n"
 		"\0\s[0]\b2Okay, sure.\n\n"
		"\0\s[2]\b2An excuse to look around!\n\n"
		--
 		"\![*]\q[Open Calendar,CALENDAR]\n/
		\![*]\q[Check Email,MailCheck]\n/
		\![*]\q[Open SSP Preferences,sspconfig]\n/
		\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
		\![*]\q[System Information,ChoiceSystemInformation]\n\n/
 		\![*]\q[Back to main menu,BACKTOMENU]\e"
}

//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]Opening the calendar.\w8\![open,calendar]\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]Opening the SSP config menu.\w8\![open,configurationdialog]\e"
	
	//Again, you can replace up to the \! tag.
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. They're for skilled developers, mostly.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]Let's see what stuff you've thrown out.\w8\w8\s[-1]\w8\w8\w8\w8\w8\0\s[0]\c\w4Nothing, apparently. It was empty.\e"
		
		//This isn't the usual flat template dialogue, mostly because I wanted to show that this is a good place to use s[-1], which I covered in the walkthrough file. You can have your ghost disappear momentarily like they're going to check your recycle bin, then come back. \c clears the ghost's balloon of text. Replace dialogue as you desire.
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]Emptying the recycle bin.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\0\s[0]\cDone.\e"
		
		"\0\s[0]This is the second recycle bin emptying dialogue.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\0\s[0]\cDone.\e"
		
		//Somewhat similar to the above, but notice the \![raise],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag. Otherwise, replace the dialogue as you want.
		//As you can see, you can have multiple pieces of dialogue in here, just like you can for many other functions scattered through the .dic files. If you only want the one, just delete the others, or if you want to add more, just copy and paste and write new dialogue as it comes to you. This applies to when the recycle bin is empty as well.
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	
	"\b[2]\0\s[11]\i[93]Alright, \0\s[11]\i[94]\i[28]give me a sec.\w5\n\n"
	--
	"/
	\0\s[11]\i[95]\w6\0\s[11]\i[94]\w2/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
Select.MailCheck
	{
		"\![biff]\e"
	}


	
OnChoiceTimeout
 {
	"\0\s[0]...Uh, hello?\e"
 }

 
//---- Secondary Character Menu ---------------------------------------------------------
//This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

OpenKeroMenu
 {
	"\1%(keroneutral)\b[2]"
	"\1%(keroembarass)\b[2]"
	"\1%(keroshock)\b[2]"
 	--
	"This is a menu introduction dialogue."
 	"This is another menu introduction dialogue."
 	"This is the third menu introduction dialogue."
 	"This is the fourth menu introduction dialogue."
 	--
	"\n\n[half]/
	\![*]\q[Update,keroupdatecheck]\n/
 	\![*]\q[Bug report,bugreport]\n\n/
	\![*]\q[Test variable,testvariable]\n/
	\![*]\q[Debug variables,debug]\n\n/
	\![*]\q[Nothing,keroCANCEL]\e"
}

Select.BACKTOMENUKERO
{
	OpenKeroMenu
}

Select.keroCANCEL
{
	//"\1%(keroneutral)This is menu cancel dialogue.\e"
}


Select.bugreport
{
"\1%(keroembarass)This is the bug report dialogue. \w5Report bugs to WhatAPhantasia on any social! \w5We were downloaded from \_a[http://www.whereveryoupostedthem.com/]some place\_a.\e"
}

Select.keroupdatecheck
{
	"\1\![updatebymyself]\e"
}

//--Test Variable --------------------------------------------------------
//I briefly mentioned the test variable in bootend.dic and possibly in etc.dic as well, I'm not sure. What exactly is the test variable? Basically, it's a place you can plug in anything you want to test out. While you can use Script Input to test most of your ghost's dialogue, there are some lines it just can't do, and it can't help you test choices. But the test variable can!
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well. Advanced Users, the test variable is also great for testing out any new stuff you may add to your ghost, like mode settings, item values, functions, raising or lowering numbers, what have you, particularly if you have a bunch you want to change all at once.

//It is ALWAYS A GOOD IDEA to test your dialogue! If you won't check it with the test variable, at least test it with Script Input! It'll save you so much trouble!

Select.testvariable
{
	"Nothing's here! Though you could maybe use this to test expressions....?\e"
	//"\1\s[2000]Dib, I'm going to call a friend over real quick.\w6\0\s[23]\i[27]A- \w2No, don't tell me its... \w8\1\s[2000]\n\n[half]ZIM!!\p[3]\s[5000]ZIIIIIIIIIIIIIM!!\0\s[13]\i[72]\i[77]\i[80]\n\n[half]NOOOOOOOOOOOOOOOOO\e"
	//\p[3] \s[-1]\0\s[0]\i[21]Oh no wait he's gone.\e"
}

Select.debug
{
	"\1%(keroneutral)Alright, here's your variables!\n\n"
	--
	"\![*]\q[Put Dib to sleep,debugsleep]\n/
	\![*]\q[Toggle translator,debugtranslate]\n/
	\![*]\q[Change kero,debugkero]\n\n"
	--
	"\![*]\q[Back,BACKTOMENUKERO]\e"
}

Select.debugsleep
{
	"hehe placeholder text\e"
}

Select.debugtranslate
{
	"more placeholder text!\e"
}

OnSetVar : all
{
	"\b2\_q"
	"(Pets: %(totalpets) | Punches: %(totalpunches))\n\n"
	
	"\![*]\q[Reset punches,resetpunch]\n"
	"\![*]\q[Reset pets,resetpet]\n"
	
	"\n\![*]\q[Back,BACKTOMENU]   \![*]\q[Cancel,CANCEL]\e"
}

Select.resetpunch
{
	totalpunches = 0
	"The punch counter is now at %(totalpunches).\e"
}
Select.resetpet
{
	totalpets = 0
	"The pet counter is now at %(totalpets).\e"
}