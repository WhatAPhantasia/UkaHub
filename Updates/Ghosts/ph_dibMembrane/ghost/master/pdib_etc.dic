//---------------------------Miscellaneous Functions--------------------------

//This .dic file is concerned with a number of functions that didn't quite fit in anywhere else. If you're adding new functions, this may be the place to do it! This also has the functions related to updating your ghost, among others.

//----------------------------------------------------------------------------


//-----location functions!! i stole most of this from levidre, yes you can see a running pattern here.--------------------

OnMouseDragStart
{	
	if BalloonCheck == 1
	{
		"\C"
	}
	elseif reference3 == 0
	{
		"\0\s[800]"
	}
	else //kero
	{
		""
	}
}

OnMouseDragEnd
{
	if basewarenameex != "SSP" || nowkeroname == "none"
	{
		endDragPoses
	}
	else
	{
		endDragPoses
		//temppose = endDragPoses
		//OnUpdateCoordinates
		//NOTE: the changing direction thing was unecessary, i'll just get rid of this stuff... TODO: eventually delete the coordinate variable on startup.
	}
	
}


OnUpdateCoordinates
{
    surfacescoordinates = IARRAY
    "\C\![get,property,OnGetAllCoordinates,currentghost.scope(0).rect,currentghost.scope(1).rect]"
}

OnGetAllCoordinates
{
    surfacescoordinates[0] = TOINT(reference0[0]) + (TOINT(reference0[2])-TOINT(reference0[0]))/2
    surfacescoordinates[1] = TOINT(reference0[3])
    surfacescoordinates[2] = TOINT(reference1[0]) + (TOINT(reference1[2])-TOINT(TOINT(reference1[0])))/2
    surfacescoordinates[3] = TOINT(reference1[3])
    OnSetShellDirection
}

OnSetShellDirection
{
    _direction = surfacescoordinates[0] - surfacescoordinates[2]
    if  _direction > lookdirection && lookdirection < 0
    {
        lookdirection *= -1
        "\C\0\![set,scaling,100,100]\1\![set,scaling,-100,100]"
        
    }
    elseif _direction < lookdirection && lookdirection > 0
    {
        lookdirection *= -1
        "\C\0\![set,scaling,-100,100]\1\![set,scaling,100,100]"
    }
    
    --
    "%(temppose)"
}

endDragPoses
{
	if BalloonCheck == 1
	{
		"\C"
	}
	--
	if reference3 == 0
	{
		dibidleyuh
		//TODO: eventually just preserve his previous pose because changing it on enddrag is kinda jarring
	}
	else
	{
		""
	}
}

//----end of location functions.-------------------------------------------------------------------------------------------

//----Capitalization-----------(thank you zi for being good at coding)
capitalize
{
	TOUPPER(SUBSTR(_argv[0],0,1)) + SUBSTR(_argv[0],1,STRLEN(_argv[0]))
}

//thank you zi, everything in this ghost is stolen from someone else :sob:
//As the name implies, this checks if the balloon is currently open or not. This was written by Levidre, and modified a bit by Zi!
//To use it I would do this, so you don't have to copy this whole chunk of code:
//_b = BalloonCheck
//if _b == 0 //_b will be 0 if the balloon is not open, or 1 if it is open
BalloonCheck
{
    if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "balloon" _in_ _currentstatus; 1
        else; 0
    }
    else; 0
}

MenuCheck
{
    if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "choosing" _in_ _currentstatus; 1
        else; 0
    }
    else; 0
}

//This function allows you to add a line break, but only for the balloon you intend your ghost to use! So if a bit of text wraps awkwardly, but you don't want to add a \n because it may look super weird in other balloons, you can put a %(br) instead! It'll be a \n in your balloon, and a single space in any other balloon. Make sure you add the name of your balloon here!
//Example: "This dialogue would cut awkwardly in a hypothetical default%(br)balloon,\w4 so a manual linebreak is added for only that balloon.\w8\w8 In any other balloon this would be a%(br)continuous line,\w4 and use SSP's default word wrap.\e"
br
{
	if SHIORI3FW.BalloonName == "Swollen Eyeball Balloon"; "\n"
	else; " "
}

//This function is to help with changing text alignment in the same line! It makes a new line by using \n, displaying a space, and then going back up a line. So you'd use it like this:
//"Text on the left%(newline)\f[align,right]Text on the right"
newline
{
	"\n \_l[0]\n[-100]"
}

//Some lorem ipsum for when you need quick filler text
loremipsum
{
	"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}

//Sanitize user inputs! This should stop any sakurascript tags from executing, as well as any envelopes. Use it for sending user input as an argument through a menu choice or raise, or for things like saving user input as file names. Like this:
//\![raise,OnSaveFile,%(Sanitize(_input))]
Sanitize
{
	"%(CHR(34))%(_argv)%(CHR(34))"
}


//--DISCORD RICH PRESENCE TIME

OnDiscordPluginBoot
{
'\![raiseplugin,Discord Rich Presence,OnDiscordPluginCustomALL,'
--
'962806901710671873,'//Appid
--
','//CustomDetail
--
','//CustomState
--
'base_icon,'//LargeImageKey
--
'Shooting Star - Dib,'//LargeImageText
//--
//'gear1,'//SmallImageKey
//--
//'Developer'//SmallImageText
--
']'
}


//--Misc shit i made yuh

//jk theres nothing here





//-----------------wow----------------


//--OnFileDrop2

//When you drop a file on the ghost that isn't something it can install
//reference0 is the file path, which is split up amongst the local variables below
OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".png" //These are pictures that they can set to wallpapers. Png works for me, but if it doesn't work for you let us know please, I'm curious about this.
		{
			_file = REPLACE(reference0,"]","\]")
			
			"\0\s[0]\i[92]\i[21]\b[2]This is %(_filename)%(_fileext)...\w8\w4 \i[76]\i[201]Want me to set it as your wallpaper or something?\n\n"
			--
			all:{
			"\![*]\q[Center it,OnWallpaper,%(_file),center]\n"
			"\![*]\q[Tile it,OnWallpaper,%(_file),tile]\n"
			"\![*]\q[Stretch it,OnWallpaper,%(_file),stretch]"
			if "Windows 7" || "Windows 10" _in_ NotifyOS //These are the 'fit' and 'fill' options available from win 7 on. NotifyOS is set just below, to check what OS you're on
			{
				"\n\![*]\q[Fill the screen,OnWallpaper,%(_file),stretch-x]"
				"\n\![*]\q[Fit the screen,OnWallpaper,%(_file),stretch-y]"
			}
			if "Windows 10" _in_ NotifyOS; "\n\![*]\q[Spanned,OnWallpaper,%(_file),span]" //Same as above, but for the span option since that's win10 and above
			
			"\n\n\![*]\q[Just wanted to show you something],DragDropImage]\n"
			"\![*]\q[It's nothing,WallpaperCancel]\e"
			}
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au", ".ogg", ".flac"
		{
			"\0\s[0]Looks like music! \w4My music player isn't ready, \w2so... \w4I can't do anything with them right now.\e"
		}
		others
		{
			if _fileext == "" //If it's a folder. Using \_? lets you display the slashes and such in dialogue, but you have to toggle it off after you no longer need it
			{
				"\0\s[0]This is \_?%(_filepath[1])\_?!\e"
			}
			else //If it's a file
			{
				"\0\s[0]This is %(_filename)%(_fileext)!\e"
			}
		}
	}		
}

//You can get other information about the OS here, it's in the other references. Reference0 includes the OS system, version, and display name
OnNotifyOSInfo
{
	NotifyOS = reference0
}

OnWallpaper
{
	"\0\![set,wallpaper,%(REPLACE(reference0,']','\]')),%(reference1)]"
	--
	"\s[0]\i[91]Alright, done. \w8\w2\i[21]\i[76]Hope that looks good?\e"
	"\s[2]\i[91]Done! \w8\w2\i[21]Hope it looks alright.\e"
	//You can remove this if check if you want a single dialogue for changing the wallpaper
	//if reference1 == "center"; "\s[0]It's centered!\e"
	//elseif reference1 == "tile"; "\0\s[0]It's tiled!\e"
	//elseif reference1 == "stretch"; "\0\s[0]It's stretched!\e"
	//elseif reference1 == "stretch-x"; "\0\s[0]It's filled!\e"
	//elseif reference1 == "stretch-y"; "\0\s[0]It's fitted!\e"
	//elseif reference1 == "span"; "\0\s[0]It's spanned!\e"
}

Select.WallpaperCancel
{
	"\0\s[0]Alright, got it. \w8Tell me if you change your mind!\e"
}

Select.DragDropImage
{
	"\0\s[0]...Oh! Uh, cool image, I guess?\e"
}

//---- OnInstallBegin -------------------------------------------------------
//OnInstallBegin is called when a file with an included install.txt is dropped on your ghost. This primarily means things like .nar files for other ghosts or .zip files containing balloons or shells for your ghosts. Primarily ghost-related things. Replace as you want.
 
OnInstallBegin
 {
	"\0\s[11]\i[94]More things to put on your desktop, huh?\e"
 }

//---- OnInstallComplete -------------------------------------------------------
//OnInstallComplete runs once the file above has finished installing.
 
OnInstallComplete
 {
	"\0"
 	--
	if reference0 == "shell"
 	{	
		if reference1 == "Florpus"
		{
		"\s[0]A look I named after the whole florpus hole incident! Check it out in the right click menu under Change Shell.\e"
		}
		elseif reference1 == "Pilot"
		{
		"\s[0]This doesn't actually exist, but it's nice to pretend, right?\e"
		}
		elseif reference1 == "Concept"
		{
		"\s[0]This doesn't actually exist, but it's nice to pretend, right?\e"
		}
		elseif reference1 == "Series"
		{
		"\s[0]This doesn't actually exist, but it's nice to pretend, right?\e"
		}
		elseif reference1 == "Zib"
		{
		"\s[0]This doesn't actually exist, but it's nice to pretend, right?\e"
		}
		elseif reference1 == "Shooting Star"
		{
		"\s[0]Huh, I'm supposed to come with this look. \w2I get it though, Shooting Star is... \w4An oc x canon fic. \w6Sad. \w8\w2Well, at least I can change my head to a reasonable size now.\e"
		}
		else //For any other shell they may install.
		{
		"\s[0]A new shell! Seems to be called %(reference1).\e"
		}
 	}
	elseif reference0 == "ghost" //if the type of the file they're installing is a ghost.
 	{
		//HELL YEAH WRITING DIALOGUE NO ONE WILL SEE, MY FAVORITE!!
		//i know if elses are kinda inefficient BUT i only know how to do _in_ with if elses sooooooooo yeah (ok so turns out if/elses are FINE in this language thats EPIC i dont wanna do anything else, if/elses are good AS IS)
		if reference1 == "Zim and GIR"
		{
		"Wait- ZIM?! \w2Aw, come on! \w4I can't believe I assisted on bringing him somewhere he could use to do... \w6The things he do! \w6Things that are definitely bad! \w8\n\n[half]If he's here, though, \w2I guess I could keep an eye on him..."
		}
		elseif reference1 == "Dib" //change to whatever quo names their dib ghost lmao
		{
		"Woah, another me! \w2After the whole Zimvoid thing, I'm honestly not surprised. \n\n[half]\w8...Wait, your desktop can communicate trans-dimensionally?!"
		}
		elseif reference1 == "Ely Crowe" //change name according to what i make the shooting star gang later
		{
		"W-Wait, Ely?! \w8You-! \w8How-? \w8\w3You brought them here?! \w8Shit, what am I gonna say to them..?! \w8\w8\w5\n\n[half](It looks like you broke the poor boy. Simp.)"
		}
		elseif reference1 == "Snatcher"
		{
		"\s[11]\i[94]\i[28]The Snatcher, huh? \w2An actual ghost... Shadow... \w4\s[2]\i[94]Thing! \w6That's going to be interesting. \w8\w8\n\n\s[2]\i[93]\i[21]\i[77]This is a little out of character, \w2\s[12]\i[73]\i[93]but thanks for downloading him!"
		}
		elseif reference1 == "Minimum YAYA Template" || "GT Template" _in_ reference1 || "X. Template" _in_ reference1 //TODO: add more of these will ya
		{
		"\s[2]\i[4]\i[94]%(reference1)? \w8Making something? \w8\i[73]The more people on here, the merrier."
		}
		elseif reference1 == "Needle" || reference1 == "Radio Nowhere" || reference1 == "Paper" || reference1 == "Hydrate" || reference1 == "Balloons" || reference1 == "Pet Rock" || reference1 == "Plushie Base"
		{
		"\s[0]\i[91]%(reference1)? \w8\s[0]\i[70]\i[91]\i[76]Okay, now you're just bringing objects onto here. \w6\s[11]\i[92]\i[76]What \w2\f[bold,1]is\f[bold,0] \w3the extent of things you can put on your desktop, anyway?"
		}
		elseif reference1 == "S the Skeleton" || reference1 == "Multiverse Sans" || reference1 == "Dr. W.D. Gaster" || reference1 == "sans" || reference1 == "Sans" || reference1 == "Papyrus" || reference1 == "Dreamtale Sans" || reference1 == "Jazz" || "skeleton" _in_ reference1
		{
		"\s[12]\i[94]Oh, wow, a skeleton! \w6\i[28]%(reference1)? \w6It's been a while since I messed with the undead... \w8\s[2]\i[93]\i[77]\i[21]\i[80]Last time didn't go so well."
		}
		elseif reference1 == "FLUX" || reference1 == "flele" //TODO: check if flele is actually correct
		{
		"\s[0]Oh, %(reference1) looks like they can play music. \w8\w3...I have a music player too, %(username)! \w2With cool playlists! \w5Am I not enough for you? Why do you need another music player in your life?! I WANT TO BE THE ONLY ONE WHO PLAYS MUSIC FOR YOU!!!\n\n[half]\w8\w3Nah I'm just kidding. \w4Phantasia didn't expect anyone to see this so they're having fun lmao"
		}
		elseif reference1 == "Shadow the Hedgehog" || reference1 == "Among Us" 
		{
		"HOLY SHIT %(TOUPPER(reference1))???" //TODO: expressions yall
		}
		else
		{
		"\s[11]\i[28]\i[94]%(reference1)... \w8\s[11]\i[94]Seems your computer is just a magnet for people, huh? \w4\s[11]\i[94]\i[26]Spelldrives \w6\s[11]\i[94]\i[25]or no spelldrives. \w6\s[12]\i[93]\i[73]Neat!"
		//Reference1 here would be the name of the ghost in install.txt. Replace as needed.
		}
		--
		all:{
		"\n\n[half]"
		"\![*]\q[Call %(reference1),CallGhost]\n"
		"\![*]\q[Change to %(reference1),ChangeToGhost]\n\n"
		"\![*]\q[No thanks,CANCEL]\e"
		}
 	}
	elseif reference0 == "balloon" //if the type of file is a balloon
 	{
		if reference1 == "Swollen Eyeball Balloon"
		{
		"\s[0]\i[4]Oh- \w6\s[2]\i[4]Finally! \w8Dad fixed up the floating monitors in my room! \w8\w2\s[12]\i[21]\i[77]\i[4]I was worried he wouldn't after what happened last time... \w8\s[11]\i[96]\i[24]\i[76]\i[4]But come on, does it seriously take that long for a disc to be repaired?\e"
		}
		else
		{
		"\s[0]This balloon seems to be called %(reference1).\e"
		//Reference1 here would be the name of the balloon. Replace as needed.
		}
 	}
	elseif reference0 == "plugin" //if the type of file is a plug-in, like a saori of some kind.
 	{
		"\s[2]\i[91]A plugin! \w6It's called %(reference1).\e"
 	}
	elseif reference0 == "calendar skin" //if the type of file is a calendar skin
	{
		"\s[0]\i[91]Just installed a calendar skin. %(reference1), right?\e"
	}
	elseif reference0 == "headline" //if the file/url you drop on them is counted as a headline. To be honest with you I don't know what determines whether a url is a headline or what.
	{
		"\0\s[0]\i[91]I've set up a headline. %(reference1), right?\e"
	}
	elseif reference0 == "rss" //this is more clearly for when you drag an rss feed onto your ghost.
	{
		"\0\s[0]\i[91]I've set up a headline. %(reference1), I think.\e"
	}
	else
	{
		"\s[2]\i[73]\i[91]No idea what %(reference1) is, but it's installed.\e"
	}
}

//Calling the ghost that was just installed. Add dialogues to these if you like.
Select.CallGhost
{
	"\![call,ghost,lastinstalled]\e"
}

//Opening the ghost that was just installed.
Select.ChangeToGhost
{
	"\![change,ghost,lastinstalled]\e"
}

//---- OnInstallFailure -------------------------------------------------------
//If the file you dropped fails to install for one reason or another.

OnInstallFailure
 {
	"\0\s[2]\i[93]\i[77]Ah... Sorry, I can't install this.\n\n[half]\w8"
	--
	if reference0 == "unsupported"
	{
	"These files must be unsupported, because I don't know what to do with them.\e"
	}	
	elseif reference0 == "extraction"
	{
	"Something messed up during the extraction process.\e"
	}
	elseif reference0 == "artificial"
	{
	"\w4\i[21]...But that's because you stopped me, so\w8\w3%(br)\s[2]\i[73]\i[91]you're welcome!\e"
	}
	elseif reference0 == "invalid type"
	{
	"I can't read this install.txt at all.\e"
	}
 }
 
 //--OnInstallRefuse
 //If the file you dropped can't be installed with this ghost.
 
OnInstallRefuse
 {
	 //oh boy i can't wait to write stuff for things no one will see (mostly bc zim doesnt have an alternate shell or anything
	if reference0 == "Invader Zim"
	{
		"\0\s[0]\i[76]...This is more @ZIM's thing, isn't it? \w6\s[3]\i[75]\i[70]\i[91]I don't really think you should give him anything, but- \w8\s[0]\i[72]\i[96]I don't have a use for this, so it's not like I can do anything about it.\e"
	}
	elseif reference0 == "Ely Crowe"
	{
		"\0\s[2]\i[28]\i[94]Oh, \w2this seems like @Ely's thing! \w8\s[2]\i[77]\i[91]You should probably give this to them and not me, you know? \w8\w2\s[2]\i[85]\i[77]\i[27]\i[93]\f[height,10]Even though I'd like to keep this...\f[height,default]\e"
	}
	elseif reference0 == "Hydrate"
	{
		"\0\s[0]\i[91]Ooh, getting some new drinks for Hydrate? \w4I can't use them- \w2Install them with Hydrate instead.\e"
	}
	else
	{
		"\0\s[0]Hmm, whatever this is, it isn't mine. \w2Try %(reference0) instead.\e"
	}
 }


//**** Uninstallation ******************************************
//You may have noticed in the configuration menus in menu.dic an option to turn Uninstall on or off, as well as a greyed out option to uninstall in the right click menu. These following functions relate to the uninstallation process when it's on. Replace the dialogue in each function as we go along.


//--OnVanishSelecting
//When you select the uninstall option in the menu.

OnVanishSelecting
{
	"\0\s[2]\i[77]\i[91]Aw, you're kicking me out? \w4I mean, your choice, I guess. \w8\s[0]\i[92]\i[26]Just hope my power points get refunded.\e"
}

//OnVanishSelected
//When you decide to uninstall them. 

OnVanishSelected
{
	"\0\s[2]\i[91]Well, \w8\s[2]\i[98]see you later, %(username). \w8\w8\s[2]\i[73]\i[91]Who knows! \w8It could happen!\w9\w9\w9\e"
}


//--OnVanishCancel
//If you select Uninstall from the menu, but decide not to do it.

OnVanishCancel
{
	"\0\s[0]...Oh. \w8Alright! \w8\w2\s[2]\i[26]\i[91]I \f[bold,1]do\f[bold,0] still kind of have things I'd like to mess with on here, \w2haha.\e"
}

//--OnVanishButtonHold
//This should trigger if you double click the ghost's balloon in the middle of OnVanishSelected above. So it basically cancels their uninstallation. I'd be pretty careful about testing this, and I'd probably just put the line of dialogue into their script input and test it that way instead.

OnVanishButtonHold
{
	"\0\s[0]Wait, what, huh? \w1Why am I still here? \w8\w5...Pfft, you didn't do that, \w2did you? \w4Guess 'seeing you later' already happened!\e"
}


 //---- OnVanished -----------------------------------------
 //OnVanished is a weird little function. Basically, if you uninstall a ghost, it'll automatically go back to the last ghost you were using. They'll then say this line of dialogue about the ghost you just uninstalled. This is very annoying to test as you can imagine! But unlikely to come up super often, I bet. You might as well be thorough and fill this out as well. Make sure to set up both their poses immediately so they both appear when it switches back to them.
 
OnVanished
 {
	"\1\s[-1]\0"
	--
	if reference0 == "Invader Zim" {
		"\s[2]\i[78]\i[91]\i[4]HAHA LMAOOOO BYE ZIM\e"
	}
	if reference0 == "Ely Crowe" {
		"\s[2]\i[21]\i[77]\i[93]...Oh, \w2um... \w6Was that Ely? \w8\w2\i[20]Why did you..?\e"
	}
	else {
		"\s[0]\i[91]... Oh. \w8\w4\i[76]Hope you're not thinking of kicking me out like you did %(reference0). \w6\s[22]\i[92]\i[78]There's still stuff for me to look at on here!\e"
	}
	//reference0 here is the name of the other ghost.
}


OnGhostCallComplete
{
	if reference0 == "Zim" { 
		"\0\s[0]Wait- ZIM?! \w8\w8\w8...Well, he can't see me, but I can see HIM! \w6Need to make sure he's not working on his evil alien plans here...\e"
	}
	if reference2 == "Ely Crowe - SS" { //TODO: once dib and ely are published, make them have a tiny exchange here
		"\0\s[2]\i[77]\i[85]\i[20]\i[93]..O-Oh, Ely..!\e"
	}
	else {
	}
}

//-------------------OnDeviceArrival
//basically like, can tell whenever u plug in an external thing. will do this later when i have a "let him snoop on your computer" option
//reference0 is a big output of all the information about what you plugged in, this'll make it lowercase so that you can check it in the ifs easier. || This big thing splits that device name, and removes the 4th section (3rd if you're counting from 0) because the 4th section changes if the device is bluetooth. Nothing of value is lost here, it should still be able to recognize the device from the other sections. Many thanks to GrayArea and Firefright for helping me on this one! (yes... this is zi borrowed code. i may delete this function in future releases)
//OnDeviceArrival
//{
//	_device = reference[0][0,","] + reference[0][1,","] + reference[0][2,","] + reference[0][4,","]
//	
//}



//**** Mail Checking *******************************************************************
//The next set of functions have to do with checking your email. This function is a slippery little thing - I've had people test it following my directions and have it work, but I've never actually gotten it to report back the right amount of emails myself. Very frustrating. But perhaps you'll have more luck with it, haha.
//Girl and Triangle can't actually read your email, they can just tell you how many emails you have. I've seen ghosts that can read the HEADERS of email, but I still don't think ghosts can actually display the contents of an email. You should be using your actual email client for that. It's still kind of a neat feature though.


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//If you want to set up your ghost to check your mail so you can more easily check these messages instead of just writing the dialogue and moving on, it's a little bit tricky, but not super hard.
//Basically, you're going to need to find your POP settings for your email account. Googling your provider + POP should bring it up pretty quick. Once you have the info, you'll go to the right click menu, options, then preferences. A big menu should pop up, and you should see POP in the left side. Click that, and input all the info from the POP page you looked up for your account. Tell your ghost to check your email, and if it works, then congratulations!
//***********************************************************************


 //---- OnBIFFBegin ---------------------------------------------------------------
 //When you first tell the ghost to check your email. An intro statement, if you will. Replace with whatever you like.
 
OnBIFFBegin
 {
	"\0\s[9]\i[23]Ah, \w2checking your email...\e"
 }

 
 //---- OnBIFFComplete ---------------------------------------------------------------
 //reference0 is the number of emails found
OnBIFFComplete
{
	if reference0 == 0 //No new emails
	{
		"\0\s[0]%(dibarmfiddle)Nope, no new mail.\e"
	}
	elseif reference0 <= 500 //less than 100 new emails
	{
		
		headers = ""
		if reference7 != "" && reference0 <= 500 //AHAHAHA I FINALLY FIGURED OUT HOW TO GET AN ARRAY OF THE HEADERS WITH AUTO TYPE CONVERT ON. They're normally in reference7, but since auto type convert changes the C_BYTE1 characters to commas, any headers with commas screw things up badly. But you can get the nonconverted values! Still need a loop to add menu markers and stuff to the display, but that can happen in the other function...
		{
			headers = SPLIT(reference.raw[7],C_BYTE1)
		}
		--
		_s = ""; if reference0 != 1; _s = "s" //Plural check, adds an s if the number of emails is not 1
		"\0\s[0]%(dibarmfiddle)You have %(reference0) new email%(_s)."
		--
		if reference7 != "" //Same as above, no need to ask if there are no headers
		{
			"\w8\w8 Wanna see the header%(_s)?"
			--
			"\n\n\![*]\q[Yes,OnSeeHeaders,yes]\n\*\![*]\q[No,OnSeeHeaders,no]"
		}
	}
	else //more than 500 new emails
	{
		{
		"\0\s[0]\i[99]...You got %(reference0) emails unread. \w8\w2" 
		--
		"\i[76]Maybe you should clean that out?\e"
		"\s[2]\i[21]\i[77]\i[99]I actually haven't cleared out my inbox, so... \w4\i[73]I shouldn't be judging you.\e"
		}
	}
	--
	"\e"
}

 //Displaying the headers. No need to touch this other than changing the surface, or if you want to make the buttons different or something. Reference0 is the list of headers
OnSeeHeaders
{
	if reference0 == "yes" //It's set up this way so that the headers variable will still be erased if the user says no. If they say no, it'll just erase the headers and say nothing
	{
		_display = ""
		foreach headers; _header
		{
			_display += "\![*]"
			_display += SHIORI3FW.EscapeAllTags(_header)
			_display += "\n\n[half]"
		}
		"\0\s[0]\b2\![set,autoscroll,disable]\*\_q"
		--
		"\![*]\q[Done,CANCEL]\n\n"
		--
		"%(_display)"
		--
		"\n\n\![*]\q[Done,CANCEL]"
	}
	--
	ERASEVAR("headers") //This erases the variable so you're not storing all those headers and bloating your save. Also, privacy reasons.
}

 //---- OnBIFFFailure ---------------------------------------------------------------
 //Various error messages that can happen when your ghost tries to connect to an email account. Replace the dialogue as appropriate.
 
OnBIFFFailure
 {
	if reference0 == "timeout" //If the connection times out.
 	{
 		"\0\s[2]\i[99]\i[23]\i[77]...Oh, \w5the connection timed out.\e"
	}
 	elseif reference0 == "kick" //If the account blocks the ghost from accessing it. I think gmail may do this at first to try and protect your account from unapproved applications using it. It gives you the option to change the setting in the warning email they send you about it.
	{
		"\0\s[0]\i[99]...Your email provider isn't letting me see your account. \w6\i[76]Maybe your email settings are weird?\e"
 	}
	elseif reference0 == "defect" //If the information put into the POP menu is wrong.
 	{
 		"\0\s[0]\i[99]...Oh, did you set up your email wrong? \w6\s[2]\i[91]You can change it in the POP menu. \w8\![open,configurationdialog]\e"
	}
 	else //if there's some other kind of error.
	{
		"\0\s[0]\i[99]\i[23]\i[76]...Huh, no idea what happened, \w2but I can't connect. \w8\w8\i[91]\i[201]\i[204]'%(reference[0])', \w5it says.\e"
		
		//reference0 here stores the error message the email server would have given the ghost, hopefully.
 	}
}


 //**** Network Update *****************************************************************
 //Replace the dialogue in the next set of functions as appropriate. You can easily test these messages using the Developer panel. Go to Open at the bottom of it and choose one of the four Update Event options to simulate a Ghost's update process. I highly recommend doing this at LEAST once if you're going to use this feature to make sure it flows well.
 
 //---- OnUpdateBegin -------------------------------------------------------------
 //When you first tell your ghost to update. An introductory statement, like OnBIFFBegin above. Replace or add more dialogue as appropriate. Note that they end with \w8 to give a little breather time.
 
OnUpdateBegin
 {
	"\0\s[2]\i[99]Oh, checking for something new?\w8\e"
	"\0\s[0]\i[99]\i[23]\i[76]\i[70]Hmm... Is there anything new?\w8\e"
 }

//reference0 is the number of new files, starting from 0
OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	_s = ""; _is = "'s"; if reference0 != 1; _s = "s"; _is = " are" //plural checks, adds an s and changes is to are if there's more than 1 file
	
	"\0\s[0]There%(_is) %(reference0) new file%(_s)!\w8\w8\e"
}

//---- OnUpdateComplete -------------------------------------------------------------
//When the ghost has finished the update process.

OnUpdateComplete
 {
	if reference0 == "none" //if the ghost had nothing to update with
 	{
 		"\0\s[0]%(dibarmfiddle)...Nope, \w2nothing.\e"
		"\0\s[0]%(dibarmfiddle)Hmm, \w2didn't see anything.\e"
	}
 	else //if the ghost has updated successfully
	{
		"\0\s[0]Done! "
		"\0\s[0]Finished! "
		--
		"You can see the the list of stuff that's changed on this \_a[https://docs.google.com/document/d/10yy69A5hkizTPMh1mmRISIDg8M3JMfOdL9abrYmme20/edit?usp=sharing]Google Doc!\_a "
		"Got a changelog at this \_a[https://docs.google.com/document/d/10yy69A5hkizTPMh1mmRISIDg8M3JMfOdL9abrYmme20/edit?usp=sharing]Google Doc!\_a "
		--
		"Looks like my tech is on version %(ghostver).\e"
		"Everything's at version %(ghostver)."
 	}
}

//hey eshal, remember to change this number every version update!
ghostver
{
	"1.0.0"
}

//Revamped this code! It's a lot more concise now (thanks zi)
//reference0 is the name of the file currently being downloaded
OnUpdate.OnDownloadBegin
{
	_progress = TOINT(reference1) + 1
	_total = TOINT(reference2) + 1
	--
	if "aitalk" _in_ reference0
	{
		"\0\s[2]\i[23]\i[99]\b2\_q(Ooh, I've got more stuff to say!)\n\n"
		"\0\s[2]\i[23]\i[99]\b2\_q(Ooh, more random conversation topics!)\n\n"
	}
	elseif "mouse" _in_ reference0
	{
		"\0\s[9]\i[23]\i[76]\b2\_q(New mouse interactions?)\n\n"
		"\0\s[9]\i[23]\b2\_q(Might react to touch differently...)\n\n"
	}
	elseif "menu" _in_ reference0
	{
		"\0\s[9]\i[23]\b2\_q(New menu stuff...)\n\n"
		"\0\s[9]\i[23]\b2\_q(Switched up my menu...)\n\n"
	}
	elseif "bootend" _in_ reference0
	{
		"\0\s[9]\i[23]\i[76]\b2\_q(Got new things to say on boot or close, maybe?)\n\n"
		"\0\s[9]\i[23]\i[76]\b2\_q(New boot greetings and close send-offs..?)\n\n"
	}
	else
	{
		"\0\s[9]\i[23]\b2\_q(Downloading %(reference0)...)\n\n"
	}
	--
	"\f[name,courier new]"
	--
	_display = ""
	for _i = 0; _i < _total; _i++
	{
		//Loading bar display - customize with text or images or whatever
		_filled = "■" //Files that have already been downloaded
		_empty = "□" //Files that have not been downloaded yet

		//This is a bit like a ternary operator, for anyone familiar with those... It's just an array with the symbols/images/text specified above, and then the index it picks is based on whether _i < _progress is true or not. Ha, take that, languages like Python that use True/False (but have actual ternary operators)!
		_display += (_empty,_filled)[_i < _progress]
	}
	--
	"%(_display)\n\n%(_progress)/%(_total)\e"
}

//reference0 is the reason the update failed
OnUpdateFailure //If the update fails
{
	if reference0 == "timeout" //If it timed out
	{
		"\0\s[2]\i[99]\i[23]\i[77]...Ah,\w4 the connection timed out.\e"
	}
	elseif reference0 == "md5 miss" //If the update files have not been uploaded correctly and don't match the updates2.dau
	{
		_currentfile = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3] //This gets the name and extension of the offending file
		"\0\s[0]\i[99]\i[23]\i[76]...Huh, looks like the MD5 values don't match.\w8\w8 %(dibarmfiddle)\i[201]\i[204]You should contact Phantasia through the creator links in the right click menu and let them know that '%(_currentfile)' is giving an MD5 error.\e"
	}
	elseif reference0 == "artificial" //If the user cancels the update by double clicking the balloon
	{
		"\0\s[0]\i[91]\i[76]Oh,\w4 changed your mind?\e"
	}
	else //Any other errors
	{
		"\0\s[0]\i[99]\i[23]\i[76]...Hm, \w2got an error. \w8\w4\i[204]\i[201]It says \w2'%(reference0)'.\e"
	}
}

 
 
 //**** Headlines and RSS Feeds *********************************************************
 //This section has to do with the RSS feeds option on your ghost. If you drag and drop a url on them, they'll add it to a list you can access via the right-click menu, and they'll tell you the last set of updates for the site. This works best with RSS feeds I think, but you can experiment with other sites to see how it works.
 //The headlines you see under the tab are in the headline folder under your base SSP install. So it'd be SSP\headlines. You should see the folders for each linked headline in there. I've very rarely ever messed with them or used them. Likewise, your RSS feeds you've added will be under SSP\rss and I don't think that option will appear in the headlines/RSS tab until you add an RSS feed to a ghost. If you want to clear your RSS feeds or headlines, just delete either of those two folders.
 

//reference0 is the name of the site, reference1 is the url
OnHeadlinesenseBegin
{
	"\0\s[2]\i[99]\i[23]Ok,\w4 I'll open %(reference0)!\e"
}

//modified x template headline code,, taken from gt template :0
//reference0 is the site name, reference1 is the url, reference3 is the headlines
OnHeadlinesense.OnFind
{
	_display = REPLACE(reference3,"\_a[","\![*]\_a[")
 	//---- Headlines
	"\0\b2%(reference0):\n\n%(_display)\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
}

Select.Headline_Cancel
{
	"\0\s[2]%(dibarmfiddle)Ok,\w4 done with RSS!\e"
}

//Looks like this happens if you view a headline and nothing has changed. I can only get RSS to work, so... I'll leave it here just in case.
OnHeadlinesenseComplete 
{
	"\0\s[0]\i[99]\i[23]\i[76]Hm, there's no update.\e"
}

//---- OnHeadlinesenseFailure ---------------------------------------------------------
//This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.

OnHeadlinesenseFailure
  {
	"\0\s[2]\i[99]\i[23]\i[77]Ah, I can't update the feed.\w8\w2\n\n[half]"
 	--
	if reference0 == "can't download"
 	{
		"\i[201]I can't download it, for some reason."
 	}
	elseif reference0 == "can't analyze"
 	{
		"\s[0]\i[99]\i[23]\i[77]I can't analyze these files..."
 	}
	else //other errors
 	{
		"\s[0]\i[99]\i[23]\i[77]I just... \w6Have no idea what went wrong here."
 	}
	--
 	"\e" //And here is the final /e, so you don't need to include it in the if statements above. Another one of the very rare cases this occurs.
}


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts. You'll want to at least make a .nar to distribute your ghost, and if you're going to be using Network Update, you'll also want to make updates2.dau as well. It's unlikely that anyone other than you will see these messages, but you should be thorough and replace them anyway.
//Primarily, you will see these messages when you're creating your updates file or updating your ghost.nar file. More on this on the walkthrough page. However, you can drag and drop another ghost's folder onto them and they'll also create a nar for that as well, if for some reason you want to do that.


 //---- OnUpdatedataCreating -----------------------------------------------------------
 //This will begin the creation of the updates2.dau file. Not unlike the other beginning functions you've seen throughout this file. Replace with whatever you like.
 
OnUpdatedataCreating
 {
	"\0\s[2]\i[99]Oh hey, new updates2.dau file?\e"
	"\0\s[0]\i[70]\i[23]\i[99]Updates, updates...\e"
	"\0\s[0]\i[99]Updates? \w4\i[23]Give me a sec...\e"
 }

 //---- OnUpdatedataCreated -------------------------------------------------------------
 //After the updates2.dau file has been successfully created. Replace with whatever.
 
OnUpdatedataCreated
 {
	"\0\s[2]\i[73]%(dibarmfiddle)Just made the updates2.dau.\e"
	"\0\s[2]\i[91]Done.\e"
 }

 //---- OnNarCreating ------------------------------------------------------------------
 //Along the same lines, this is when they begin creating a .nar file for your ghost. .nars are the format most ghosts will be in, something similar to a .zip file, and this is the format you'll be distributing your ghost in most likely. Replace the dialogue with whatever you like.
 
OnNarCreating
 {
	"\0\s[0]\i[99]\i[23]\i[70]Making the .nar...\e"
	"\0\s[0]\i[99]\i[23]\i[70]A .nar? \w4Give me a sec...\e"
 }

 //---- OnNarCreated -------------------------------------------------------------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	"\0\s[0]\i[91]Created '%(reference0)'.\e"
	"\0\s[0]\i[91]\i[72]Okay, just made '%(reference0)'.\e"
	//reference0 here will be the filename of the nar you just created. It should drop the nar in the folder where all your ghosts are listed, ssp\ghost\.
 }

//reference0 is the name of the server it's connecting to
OnSNTPBegin
{
	"\0\s[0]\i[99]Sure,\w4 I'll check your time against %(reference0).\w8\w8\e"
}

//Grabbed this from the X Template, which took from GT template!!
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//Above comment from the person who originally coded these functions
//reference0 is the name of the server it's connecting to, reference1 is the server's time, reference2 is the computer's time, reference3 is the difference (in seconds)
OnSNTPCompare
{
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n"
	--
	"Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
		"\s[2]\i[91]Your clock's good!\e"
		"\s[0]\i[91]Time looks accurate.\e"
	}
 	else //if your clock doesn't match
	{
		"\0\s[0]\i[23]\i[99]Oh, your clock doesn't match. \w8"
		"\0\s[0]\i[23]\i[99]Yeah, that's off. \w8"
		--
		"\i[201]I can fix it if you want."
		"\i[201]Want me to fix it?"
		--
		all:{
		"\n\n"
		"\![*]\q[Fix it,OnSNTPExecute]\n"
		"\![*]\q[Leave it alone,OnSNTPCancel]\e"
		}
	}
}

//The \6 is what actually changes the clock
OnSNTPExecute
{
	"\6"
	--
	"\0\s[2]\i[91]Cool, should be fixed now.\e"
}

OnSNTPCancel
{
	"\0\s[2]\i[91]Alright, your call.\e"
	"\0\s[0]\i[91]Okay, \w2tell me if you wanna change it later or something.\e"
}

//reference0 is the name of the SNTP server - Note that this may happen before any other STNP dialogue is said! Keep in mind when writing your dialogue that the user will not necessarily have clicked the yes button.
OnSNTPFailure
{
	"\0\s[0]\i[23]\i[99]\i[76]Oh, huh... \w4Something went wrong. \w6\i[201]Try again later?\e"
}


 //--OnDisplayChange----------------------------------------------------------------
 //This is when you change the resolution of your monitor while your ghost is running. Don't mess with any of this, it should be fine as is.
 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }



//---- OnScreenSaverStart -------------------------------------------------------
//This happens if your ghost is running when your screensaver starts up. I've never got this to trigger but I love this idea, and I feel like there's a way to do it I haven'tfigured out yet. So you can skip these for now if you want, but if I do ever get it working, I'll come back and make a note of it.
 
OnScreenSaverStart
 {
	"\0\s[0]\i[26]%(dibarmfiddle)...Huh, seems like your screensaver might be starting up.\e"
 }

OnScreenSaverEnd
 {
	"\0\s[2]\i[93]\i[25]\i[77]...Oh, \w4uh. \w8\w4\i[26]It's over..?\e"
 }


//---- OnApplicationBoot ---------------------------------------------------------------
//This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
 {
	"\0\s[0]%(reference0) just started.\e"
 }

//---- OnApplicationClose --------------------------------------------------------------
//See above, but for the program closing.
 
OnApplicationClose
 {
	"\0\s[0]%(reference0) has closed.\e"
 }

//---- OnApplicationFileOpen ----------------------------------------------------------
//I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
 {
	"\0\s[0]Opening %(reference1).\e"
 }




 //---- OnBatteryLow -----------------------------------------------------------------
OnBatteryLow
 {
	"\0\s[0]\i[92]\i[28]Looks like you have %(reference0) battery left...\e"
	//reference0 here is the amount of battery power. Replace as you like.
 }
 
 //--OnBatteryCritical-----------------------------------------------------------------
OnBatteryCritical
{
	"\0\s[2]\i[77]\i[93]...Geez, charge your computer! \w6I'm \w8\i[23]\i[80]not sure what happens to me if it dies while I'm here.\e"
}
 
//--OnBatteryNotify--------------------------------------------------------------------
//This I believe checks to see if your laptop is plugged in or not. Originally this bit of code was commented out, so I suspect it may not work. It may need a plug-in of some sort. Either way, you can delete it or fill it out as you like.
//Actually investigating this, leaving this in makes it so the ghost updates you about whether or not your computer is plugged-in constantly, which makes no sense for desktops. No doubt why it was commented out. You can delete it or just leave it be.

/*
OnBatteryNotify
{
	if reference2 == "online" //If your laptop is plugged in
	{
		"\0\s[0]The laptop is plugged in.\e"
	}
	elseif reference2 == "offline" //If you unplug your laptop
	{
		"\1\s[10]The laptop is not plugged in.\w8\0\s[0]Watch your battery.\e"
	}
}
*/


//reference0 is the new size, reference1 is the previous size. Sadly, you can't check for the Y scale.
OnShellScaling
{
	nowscale[0] = reference0 //X
	nowscale[1] = reference2 //Y
	
	if reference0 == 100
	{
		if nowshell == "Shooting Star" {
		"\0\s[0]...I would say that I'm back to normal, \w2but I still look pretty big compared to everything around me...\e"
		}
		else {
		"\0\s[0]Ah, that's a comfortable size...\e"
		}
	}
	elseif reference0 < 0 //If it's backwards
	{
		"\0\s[0]Backwards"
		--
		if reference2 < 0 //If it's also upside down
		{
			" and upside down"
		}
		--
		"!\e"
	}
	elseif reference2 < 2 //Upside down but not backwards
	{
		"Upside down!\e"
	}
	elseif reference0 > reference1 //getting bigger
	{
		"\0\s[0]Getting bigger!\e"
	}
	elseif reference0 < reference1 //getting smaller
	{
		"\0\s[0]Getting smaller!\e"
	}
}

 //--OnShellScaling
//OnShellScaling
//{
//	if reference0 >= 150
//	{
//		"\0\s[0]Hey, my base scale is already really big! Isn't this excessive..??\e"
//	}
//	elseif reference0 == 100
//	{
//		"\0\s[0]I would say that I'm normal sized, but I still seem relatively big to everything around me...\e"
//	}
//	elseif reference0 <= 35
//	{
//		"\0\s[0]Little man holding an artery shut?? Lemon Demon real??\e"
//	}
//}

//Hotkeys
OnKeyPress
{
	case reference0
	{
		when "t"; OnAiTalk
		when "r"; OnLastTalk
		when "y"; "\![raise,OnStartTalking]" //Starts a commu dialogue with a random ghost
		when "f1"; "\![open,readme]"
		when "f5"; {if debug; "\![reload,ghost]"}
		when "f6"; {if debug; "\![reload,shiori]"}
		when "f7"; {if debug; "\![reload,shell]"}
		when "f8"; {if debug; "\![reload,balloon]"}
		when "v"; {if debug; OnTestVar}
		when "c"; {if debug; OnCommuPingMenu}
	}
}